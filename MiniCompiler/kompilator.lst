
// ==========================================================================
//  GPPG error listing for yacc source file <kompilator.y - 20.06.2020 22:57:51>
// ==========================================================================
//  Version:  1.5.2
//  Machine:  DESKTOP-EC4UU67
//  DateTime: 20.06.2020 22:58:02
//  UserName: tomek
// ==========================================================================



// Uwaga: W wywoÅaniu generatora gppg naleÅ¼y uÅ¼yÄ opcji /gplex

%namespace GardensPoint

%union
{
public string  val;
public char    type;
}

%token Assign Plus Minus Multiplies Divides SumLog IlLog
%token Program Return Eof Error 
%token If Else While
%token Read Write
%token Int Double Bool IntConv DoubleConv
%token True False
%token OpenBracket CloseBracket Semicolon OpenPar ClosePar Return
%token Equal NotEqual Greater GreaterEqual Less LessEqual And Or Exclamation Neg
%token <val> Ident IntNumber RealNumber String

%type <type> code stat exp term factor declare cond while log assign expLog expRel

%%
start    : Program OpenBracket declars CloseBracket 
           {
               Compiler.EmitCode("ldc.i4 0");
           }
               Eof 
           ;
declars  : declare declars | code;
code     : code stat
          | stat
          ;
return   : Return Semicolon
          {
            Compiler.EmitCode("ldc.i4 0");
            Compiler.EmitCode("leave EndMain");
          }
          ;
stat      : write | assign | while | block | cond | return | read 
          | error
          {
               Console.WriteLine("  line {0,3}:  syntax error",@1.StartLine);
               ++Compiler.errors;
               yyerrok();
          }
          | error Eof
          {
               Console.WriteLine("  line {0,3}:  syntax error",@1.StartLine);
               ++Compiler.errors;
               yyerrok();
               YYACCEPT;
          }
          ;
block     : OpenBracket code CloseBracket 
          | OpenBracket CloseBracket
          ;
cond      : ifelse | if
          ;
while     : While
            { 
                deeplevel++;
                if (deeplevel == 1)
                    temp = Compiler.NewTemp();
                Compiler.EmitCode("{0}:", temp + "_" + deeplevel.ToString());
            }
            OpenPar expLog ClosePar 
            { 
                if (deeplevel == 1)
                    temp2 = Compiler.NewTemp();
                Compiler.EmitCode("brfalse {0}", temp2 + "_" + deeplevel.ToString()); 
            }
            stat
            { 
                Compiler.EmitCode("br {0}", temp + "_" + deeplevel.ToString());
                Compiler.EmitCode("{0}:", temp2 + "_" + deeplevel.ToString());
                deeplevel--;
            }
          ;
ifhead     : If OpenPar expLog ClosePar
            {
                deeplevel++;
                if (deeplevel == 1)
                    temp = Compiler.NewTemp();
                Compiler.EmitCode("brfalse {0}", temp + "_" + deeplevel.ToString());
            }
            ;
if        : ifhead
            stat
            { 
                Compiler.EmitCode("{0}:", temp + "_" + deeplevel.ToString());
                deeplevel--;
            }
          ;
ifelse    : ifhead
            stat
            Else
            {
               
                if (deeplevel == 1)
                    temp2 = Compiler.NewTemp();
                Compiler.EmitCode("br {0}", temp2 + "_" + deeplevel.ToString());
                Compiler.EmitCode("{0}:", temp + "_" + deeplevel.ToString());
            }
            stat
            {
                Compiler.EmitCode("{0}:", temp2 + "_" + deeplevel.ToString());
                deeplevel--;
            }
            ;
declare   : Int Ident Semicolon
            {
                if (System.Linq.Enumerable.All(Compiler.symbolTable.Keys, ident => ident != $2))
                {
                    Compiler.EmitCode(".locals init ( int32 {0} )", $2);
                    Compiler.symbolTable.Add($2, "int");
                }
                else
                {
                    Console.WriteLine("line {0,3}:  variable already declared!", @1.StartLine);
                    Compiler.errors++;
                }

            }
            | Double Ident Semicolon
            {
                if (System.Linq.Enumerable.All(Compiler.symbolTable.Keys, ident => ident != $2))
                {
                    Compiler.EmitCode(".locals init ( float64 {0} )", $2);
                    Compiler.symbolTable.Add($2, "double");
                }
                else
                {
                    Console.WriteLine("line {0,3}:  variable already declared!", @1.StartLine);
                    Compiler.errors++;
                }
            }
            | Bool Ident Semicolon
            {
                if (System.Linq.Enumerable.All(Compiler.symbolTable.Keys, ident => ident != $2))
                {
                    Compiler.EmitCode(".locals init ( int32 {0} )", $2);
                    Compiler.symbolTable.Add($2, "bool");
                }
                else
                {
                    Console.WriteLine("line {0,3}:  variable already declared!", @1.StartLine);
                    Compiler.errors++;
                }
            }
            ;
write     : Write
            {
               Compiler.EmitCode("ldstr \"{0}\"");
            }
            exp Semicolon
            {
               Compiler.EmitCode("box [mscorlib]System.{0}",$3=='i'?"Int32":"Double");
               Compiler.EmitCode("ldstr \"{0}\"",$3=='i'?"i":"r");
               Compiler.EmitCode("call void [mscorlib]System.Console::Write(string,object,object)");
               Compiler.EmitCode("");
            }
            | Write String Semicolon
            {
                Compiler.EmitCode("ldstr {0}", $2);
                Compiler.EmitCode("call void [mscorlib]System.Console::Write(string)");
            }
          ;
read      : Read Ident Semicolon
            {
               if (!Compiler.symbolTable.ContainsKey($2)) 
               {
                    Console.WriteLine("line {0,3}: error - use of undeclared variable", @1.StartLine);
                    Compiler.errors++;
               }
               else
               {
                    Compiler.EmitCode("call string [mscorlib]System.Console::ReadLine()");
                    if (Compiler.symbolTable[$2] == "bool")
                    {
                        Compiler.EmitCode("stsfld string Compiler.boolVal");
                        Console.WriteLine(Compiler.boolVal);
                        if (Compiler.boolVal == "true")
                            Compiler.EmitCode("ldc.i4 1");
                        else if (Compiler.boolVal == "false")
                            Compiler.EmitCode("ldc.i4 0");
                        else
                            Console.WriteLine("bladd");
                    }
                    else if (Compiler.symbolTable[$2] == "int")
                    {
                        Compiler.EmitCode("call int32 [mscorlib]System.Int32::Parse(string)");
                    }
                    else
                    {
                       Compiler.EmitCode("call float64 [mscorlib]System.Double::Parse(string)");
                    }
                    Compiler.EmitCode("stloc {0}", $2);
               }
          };
assign    :  Ident Assign assign 
          {        
//--------^
// Error: Position of unmatched brace
// ----------------------------------
               if (!Compiler.symbolTable.ContainsKey($1)) 
               {
                    Console.WriteLine("line {0,3}: error - use of undeclared variable", @1.StartLine);
                    Compiler.errors++;
               }
               else
               {
                    if (Compiler.symbolTable[$1]=="int" && $3 != 'i')
                    {
                        Console.WriteLine("line {0,3}:  semantic error - cannot convert to int (use convert operator)",@1.StartLine);
                        ++Compiler.errors;
                    } 
                    else if (Compiler.symbolTable[$1]=="double" && $3 != 'd' && $3 != 'i')
                    {
                        Console.WriteLine("line {0,3}:  semantic error - cannot convert to double (use convert operator)",@1.StartLine);
                        ++Compiler.errors;
                    }
                    else if (Compiler.symbolTable[$1]=="bool" && $3 != 'b')
                    {
                        Console.WriteLine("line {0,3}:  semantic error - cannot convert to bool (use convert operator)",@1.StartLine);
                        ++Compiler.errors;
                    }
                    else
                    {
                        $$ = $3;
                        if (Compiler.symbolTable[$1]=="double" && $3 =='i')
                        {
                            Compiler.EmitCode("conv.r8");
                            $$ = 'd';
                        
                        Compiler.EmitCode("ldloc {0}", vari);
                        Compiler.EmitCode("stloc {0}", $1);
                    }
               }
            }
            | Ident Assign expLog Semicolon
            {
               if (!Compiler.symbolTable.ContainsKey($1)) 
               {
                    Console.WriteLine("line {0,3}: error - use of undeclared variable", @1.StartLine);
                    Compiler.errors++;
               }
               else
               {
                    if (Compiler.symbolTable[$1]=="int" && $3 != 'i')
                    {
                        Console.WriteLine("line {0,3}:  semantic error - cannot convert to int (use convert operator)",@1.StartLine);
                        ++Compiler.errors;
                    } 
                    else if (Compiler.symbolTable[$1]=="double" && $3 != 'd' && $3 != 'i')
                    {
                        Console.WriteLine("line {0,3}:  semantic error - cannot convert to double (use convert operator)",@1.StartLine);
                        ++Compiler.errors;
                    }
                    else if (Compiler.symbolTable[$1]=="bool" && $3 != 'b')
                    {
                        Console.WriteLine("line {0,3}:  semantic error - cannot convert to bool (use convert operator)",@1.StartLine);
                        ++Compiler.errors;
                    }
                    else
                    {
                        $$ = $3;
                        if (Compiler.symbolTable[$1]=="double" && $3 =='i')
                        {
                            Compiler.EmitCode("conv.r8");
                            $$ = 'd';
                        }
                        vari = $1;
                        Compiler.EmitCode("stloc {0}", $1);
                        
                    }
               }
            } 
          ;
expLog    : expLog And expRel
            {
                if ($1 != 'b' || $3 != 'b')
                {
                    Console.WriteLine("line {0,3}:  semantic error - && operator can be used to bool arguments",@1.StartLine);
                    ++Compiler.errors;
                }
                else
                {
                    Compiler.EmitCode("and");
                    $$ = 'b';
                }
            }
            | expLog Or expRel
            {
                if ($1 != 'b' || $3 != 'b')
                {
                    Console.WriteLine("line {0,3}:  semantic error - || operator can be used to bool arguments",@1.StartLine);
                    ++Compiler.errors;
                }
                else
                {
                    Compiler.EmitCode("or");
                    $$ = 'b';
                }
            }
            | expRel { $$ = $1; }
            ;
expRel    : expRel Equal exp
            {
                if (($1 == 'b' && $3 != 'b') || ($1 != 'b' && $3 == 'b'))
                {
                    Console.WriteLine("line {0,3}:  semantic error - == operator cannot be used to these arguments",@1.StartLine);
                    ++Compiler.errors;
                }
                else
                {
                    Compiler.EmitCode("ceq");
                    $$ = 'b';
                }
            }
            | expRel NotEqual exp
            {
                if (($1 == 'b' && $3 != 'b') || ($1 != 'b' && $3 == 'b'))
                {
                    Console.WriteLine("line {0,3}:  semantic error - != operator cannot be used to these arguments",@1.StartLine);
                    ++Compiler.errors;
                }
                else
                {
                    Compiler.EmitCode("ceq");
                    Compiler.EmitCode("neg");
                    $$ = 'b';
                }
            }
            | expRel Greater exp
            {
                if ($1 == 'b' || $3 == 'b')
                {
                    Console.WriteLine("line {0,3}:  semantic error - > operator cannot be used to bool arguments",@1.StartLine);
                    ++Compiler.errors;
                }
                else
                {
                    Compiler.EmitCode("cgt");
                    $$ = 'b';
                }
            }
            | expRel GreaterEqual exp
            {
                if ($1 == 'b' || $3 == 'b')
                {
                    Console.WriteLine("line {0,3}:  semantic error - >= operator cannot be used to bool arguments",@1.StartLine);
                    ++Compiler.errors;
                }
                else
                {
                    Compiler.EmitCode("ldc.i4 1");
                    Compiler.EmitCode("sub");
                    Compiler.EmitCode("cgt");
                    $$ = 'b';
                }
            }
            | expRel Less exp
            {
                Compiler.EmitCode("clt");
                $$ = 'b';
            }
            | expRel LessEqual exp
            {
                Compiler.EmitCode("ldc.i4 1");
                Compiler.EmitCode("add");
                Compiler.EmitCode("clt");
                $$ = 'b';
            }
            | exp { $$ = $1; }
            ;
exp       : exp Plus term
               { $$ = BinaryOpGenCode(Tokens.Plus, $1, $3); }
          | exp Minus term
               { $$ = BinaryOpGenCode(Tokens.Minus, $1, $3); }
          | term
               { $$ = $1; }
          ;

term      : term Multiplies log
               { $$ = BinaryOpGenCode(Tokens.Multiplies, $1, $3); }
          | term Divides log
               { $$ = BinaryOpGenCode(Tokens.Divides, $1, $3); }
          | log
               { $$ = $1; }
          ;
log       : log SumLog log
               { $$ = BinaryOpGenCode(Tokens.SumLog, $1, $3); }
          | log IlLog log
               { $$ = BinaryOpGenCode(Tokens.IlLog, $1, $3); }
          | factor
               { $$ = $1; }
          ;
factor    : OpenPar expLog ClosePar
               { $$ = $2; }
          | Minus OpenPar expLog ClosePar
          {
            $$ = $3;
            Compiler.EmitCode("neg");
          }
          | Exclamation OpenPar expLog ClosePar
          {
            Compiler.EmitCode("ldc.i4 1");
            Compiler.EmitCode("sub");
          }
          | Neg OpenPar expLog ClosePar
          {
            $$ = $3;
            Compiler.EmitCode("not");
          }
          | IntConv OpenPar expLog ClosePar
          {
            if ($3 == 'd')
            {
                $$ = 'i';
                Compiler.EmitCode("conv.i4");
            }
            else
            {
                 Console.WriteLine("line {0,3}:  expression must be double to use (int) convertion",@1.StartLine);
                 Compiler.errors++;
            }
          }
          | DoubleConv OpenPar expLog ClosePar
          {
            if ($3 == 'i')
            {
                $$ = 'd';
                Compiler.EmitCode("conv.r8");
            }
            else
            {
                 Console.WriteLine("line {0,3}:  expression must be int to use (double) convertion",@1.StartLine);
                 Compiler.errors++;
            }
          }
          | IntNumber
          {
               Compiler.EmitCode("ldc.i4 {0}",int.Parse($1));
               $$ = 'i'; 
          }
          | RealNumber
          {
               double d = double.Parse($1,System.Globalization.CultureInfo.InvariantCulture);
               Compiler.EmitCode(string.Format(System.Globalization.CultureInfo.InvariantCulture,"ldc.r8 {0}",d));
               $$ = 'd'; 
          }
          | Minus IntNumber
          {
               Compiler.EmitCode("ldc.i4 {0}",int.Parse($2) * -1);
               $$ = 'i'; 
          }
          | DoubleConv IntNumber
          {
            Compiler.EmitCode("ldc.i4 {0}",int.Parse($2));
            Compiler.EmitCode("conv.r8");
            $$ = 'd';
          }
          | IntConv RealNumber
          {
            double d = double.Parse($2,System.Globalization.CultureInfo.InvariantCulture);
            Compiler.EmitCode(string.Format(System.Globalization.CultureInfo.InvariantCulture,"ldc.r8 {0}",d));
            Compiler.EmitCode("conv.i4");
            $$ = 'i';
          }
          | Minus RealNumber
          {
               double d = double.Parse($2,System.Globalization.CultureInfo.InvariantCulture) * -1;
               Compiler.EmitCode(string.Format(System.Globalization.CultureInfo.InvariantCulture,"ldc.r8 {0}",d));
               $$ = 'd'; 
          }
          | True
          {
                Compiler.EmitCode("ldc.i4 1");
                $$ = 'b';
          }
          | False
          {
                Compiler.EmitCode("ldc.i4 0");
                $$ = 'b';
          }
          | Ident
          {
               if (!Compiler.symbolTable.ContainsKey($1)) 
               {
                    Console.WriteLine("line {0,3}: error - use of undeclared variable", @1.StartLine);
                    Compiler.errors++;
               }
               else
               {
                   Compiler.EmitCode("ldloc {0}", $1);
                   switch(Compiler.symbolTable[$1])
                   {
                        case "int":
                            $$ = 'i';
                            break;
                        case "double":
                            $$ = 'd';
                            break;
                        case "bool":
                            $$ = 'b';
                            break;
                        default:
                            Console.WriteLine("line {0,3}:  unrecognized type",@1.StartLine);
                            Compiler.errors++;
                            break;
                   }
               }
          }
          | Minus Ident
          {
               if (!Compiler.symbolTable.ContainsKey($2)) 
               {
                    Console.WriteLine("line {0,3}: error - use of undeclared variable", @1.StartLine);
                    Compiler.errors++;
               }
               else 
               {
                   if (Compiler.symbolTable[$2] != "int" && Compiler.symbolTable[$2] != "double")
                   {
                        Console.WriteLine("line {0,3}: cannot use - operator to bool variable", @1.StartLine);
                        Compiler.errors++;
                   }
                   else
                   {
                       Compiler.EmitCode("ldloc {0}", $2);
                       Compiler.EmitCode("neg");
                       switch(Compiler.symbolTable[$2])
                       {
                            case "int":
                                $$ = 'i';
                                break;
                            case "double":
                                $$ = 'd';
                                break;
                            default:
                                Console.WriteLine("line {0,3}:  unrecognized type",@1.StartLine);
                                Compiler.errors++;
                                break;
                       }
                   }
               }
          }
          | IntConv Ident
          {
               if (!Compiler.symbolTable.ContainsKey($2)) 
               {
                    Console.WriteLine("line {0,3}: error - use of undeclared variable", @1.StartLine);
                    Compiler.errors++;
               }
               else
               {
                   if (Compiler.symbolTable[$2] != "double")
                   {
                        Console.WriteLine("line {0,3}: cannot use (int) operator to non double variable", @1.StartLine);
                        Compiler.errors++;
                   }
                   else
                   {
                       Compiler.EmitCode("ldloc {0}", $2);
                       Compiler.EmitCode("conv.i4");
                       $$ = 'i';
                   }
               }
          }
          | DoubleConv Ident
          {
               if (!Compiler.symbolTable.ContainsKey($2)) 
               {
                    Console.WriteLine("line {0,3}: error - use of undeclared variable", @1.StartLine);
                    Compiler.errors++;
               }
               else
               {
                   if (Compiler.symbolTable[$2] != "int")
                   {
                        Console.WriteLine("line {0,3}: cannot use (double) operator to non int variable", @1.StartLine);
                        Compiler.errors++;
                   }
                   else
                   {
                       Compiler.EmitCode("ldloc {0}", $2);
                       Compiler.EmitCode("conv.r8");
                       $$ = 'd';
                   }
               }
          }
           | Neg Ident
          {
               if (!Compiler.symbolTable.ContainsKey($2)) 
               {
                    Console.WriteLine("line {0,3}: error - use of undeclared variable", @1.StartLine);
                    Compiler.errors++;
               }
               else
               {
                   if (Compiler.symbolTable[$2] != "int" && Compiler.symbolTable[$2] != "double")
                   {
                        Console.WriteLine("line {0,3}: cannot use ~ operator to bool variable", @1.StartLine);
                        Compiler.errors++;
                   }
                   else
                   {
                       Compiler.EmitCode("ldloc {0}", $2);
                       Compiler.EmitCode("not");
                       switch(Compiler.symbolTable[$2])
                       {
                            case "int":
                                $$ = 'i';
                                break;
                            case "double":
                                $$ = 'd';
                                break;
                            default:
                                Console.WriteLine("line {0,3}:  unrecognized type",@1.StartLine);
                                Compiler.errors++;
                                break;
                       }
                   }
               }
          }
         | Exclamation Ident
            {
                if (Compiler.symbolTable.ContainsKey($2))
                {
                    if (Compiler.symbolTable[$2] == "bool")
                    {
                        Compiler.EmitCode("ldloc {0}", $2);
                        Compiler.EmitCode("ldc.i4 1");
                        Compiler.EmitCode("sub");
                    }
                    else
                    {
                        Console.WriteLine("line {0,3}:  only bool variables can be used with !", @1.StartLine);
                        Compiler.errors++;
                    }
                }
                else
                {
                    Console.WriteLine("line {0,3}:  use of undeclared variable!", @1.StartLine);
                    Compiler.errors++;
                }
            }
          ;
%%
// Error: Premature termination of Code Block
// Error: Syntax error, unexpected %%, expecting codeEnd, or error
// ---------------------------------------------------------------

string temp;
string temp2;
int deeplevel = 0;
//-----------^^^^
// Error: This character is invalid in this context
// Error: This character is invalid in this context
// ------------------------------------------------
string vari;

public Parser(Scanner scanner) : base(scanner) { }
//----------^^--------------^^------^^------^^
// Error: This character is invalid in this context
// Error: This character is invalid in this context
// Error: This character is invalid in this context
// Error: This character is invalid in this context
// ------------------------------------------------

private char BinaryOpGenCode(Tokens t, char type1, char type2)
//-------------------------^^-------------------------------^^
// Error: This character is invalid in this context
// Error: This character is invalid in this context
// ------------------------------------------------
    {
    char type = ( type1=='i' && type2=='i' ) ? 'i' : 'r' ;
    if ( type1!=type )
    {
        Compiler.EmitCode("stloc temp");
        Compiler.EmitCode("conv.r8");
        Compiler.EmitCode("ldloc temp");
    }
    if ( type2!=type )
        Compiler.EmitCode("conv.r8");
    switch ( t )
        {
        case Tokens.Plus:
            Compiler.EmitCode("add");
            break;
        case Tokens.Minus:
            Compiler.EmitCode("sub");
            break;
        case Tokens.Multiplies:
            Compiler.EmitCode("mul");
            break;
        case Tokens.Divides:
            Compiler.EmitCode("div");
            break;
        case Tokens.SumLog:
            Compiler.EmitCode("or");
            break;
        case Tokens.IlLog:
            Compiler.EmitCode("and");
            break;
        default:
            //Console.WriteLine($"  line {0}:  internal gencode error", @1.StartLine);
            ++Compiler.errors;
            break;
        }
    return type;
    }// ==========================================================================

