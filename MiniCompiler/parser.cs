// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  DESKTOP-EC4UU67
// DateTime: 16.06.2020 21:03:26
// UserName: tomek
// Input file <kompilator.y - 16.06.2020 21:03:21>

// options: lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace GardensPoint
{
public enum Tokens {error=2,EOF=3,Assign=4,Plus=5,Minus=6,
    Multiplies=7,Divides=8,SumLog=9,IlLog=10,Program=11,Return=12,
    Eof=13,Error=14,If=15,Else=16,While=17,Read=18,
    Write=19,Int=20,Double=21,Bool=22,True=23,False=24,
    OpenBracket=25,CloseBracket=26,Semicolon=27,OpenPar=28,ClosePar=29,Equal=30,
    NotEqual=31,Greater=32,GreaterEqual=33,Less=34,LessEqual=35,And=36,
    Or=37,Exclamation=38,Neg=39,Ident=40,IntNumber=41,RealNumber=42,
    String=43};

public struct ValueType
#line 7 "kompilator.y"
{
public string  val;
public char    type;
}
#line default
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[67];
  private static State[] states = new State[124];
  private static string[] nonTerms = new string[] {
      "code", "stat", "exp", "term", "factor", "declare", "bool", "cond", "while", 
      "log", "start", "$accept", "Anon@1", "write", "assign", "block", "ifelse", 
      "if", "Anon@2", "fullbool", "Anon@3", "ifhead", "Anon@4", "Anon@5", };

  static Parser() {
    states[0] = new State(new int[]{11,3},new int[]{-11,1});
    states[1] = new State(new int[]{3,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{25,4});
    states[4] = new State(new int[]{19,11,40,53,20,58,21,61,22,64,17,68,25,76,15,86,2,121},new int[]{-1,5,-2,123,-14,10,-15,52,-6,57,-9,67,-16,75,-8,79,-17,80,-22,81,-18,120});
    states[5] = new State(new int[]{26,6,19,11,40,53,20,58,21,61,22,64,17,68,25,76,15,86,2,121},new int[]{-2,9,-14,10,-15,52,-6,57,-9,67,-16,75,-8,79,-17,80,-22,81,-18,120});
    states[6] = new State(-2,new int[]{-13,7});
    states[7] = new State(new int[]{13,8});
    states[8] = new State(-3);
    states[9] = new State(-4);
    states[10] = new State(-6);
    states[11] = new State(new int[]{43,50,28,-42,6,-42,39,-42,41,-42,42,-42,23,-42,24,-42,40,-42},new int[]{-24,12});
    states[12] = new State(new int[]{28,24,6,31,39,37,41,41,42,42,23,43,24,44,40,45},new int[]{-3,13,-4,35,-10,36,-5,23});
    states[13] = new State(new int[]{27,14,5,15,6,27});
    states[14] = new State(-43);
    states[15] = new State(new int[]{28,24,6,31,39,37,41,41,42,42,23,43,24,44,40,45},new int[]{-4,16,-10,36,-5,23});
    states[16] = new State(new int[]{7,17,8,29,27,-46,5,-46,6,-46,29,-46,30,-46,31,-46,32,-46,33,-46,34,-46,35,-46,36,-46,37,-46});
    states[17] = new State(new int[]{28,24,6,31,39,37,41,41,42,42,23,43,24,44,40,45},new int[]{-10,18,-5,23});
    states[18] = new State(new int[]{9,19,10,21,7,-49,8,-49,27,-49,5,-49,6,-49,29,-49,30,-49,31,-49,32,-49,33,-49,34,-49,35,-49,36,-49,37,-49});
    states[19] = new State(new int[]{28,24,6,31,39,37,41,41,42,42,23,43,24,44,40,45},new int[]{-10,20,-5,23});
    states[20] = new State(new int[]{9,19,10,21,7,-52,8,-52,27,-52,5,-52,6,-52,29,-52,30,-52,31,-52,32,-52,33,-52,34,-52,35,-52,36,-52,37,-52});
    states[21] = new State(new int[]{28,24,6,31,39,37,41,41,42,42,23,43,24,44,40,45},new int[]{-10,22,-5,23});
    states[22] = new State(new int[]{9,19,10,21,7,-53,8,-53,27,-53,5,-53,6,-53,29,-53,30,-53,31,-53,32,-53,33,-53,34,-53,35,-53,36,-53,37,-53});
    states[23] = new State(-54);
    states[24] = new State(new int[]{28,24,6,31,39,37,41,41,42,42,23,43,24,44,40,45},new int[]{-3,25,-4,35,-10,36,-5,23});
    states[25] = new State(new int[]{29,26,5,15,6,27});
    states[26] = new State(-55);
    states[27] = new State(new int[]{28,24,6,31,39,37,41,41,42,42,23,43,24,44,40,45},new int[]{-4,28,-10,36,-5,23});
    states[28] = new State(new int[]{7,17,8,29,27,-47,5,-47,6,-47,29,-47,30,-47,31,-47,32,-47,33,-47,34,-47,35,-47,36,-47,37,-47});
    states[29] = new State(new int[]{28,24,6,31,39,37,41,41,42,42,23,43,24,44,40,45},new int[]{-10,30,-5,23});
    states[30] = new State(new int[]{9,19,10,21,7,-50,8,-50,27,-50,5,-50,6,-50,29,-50,30,-50,31,-50,32,-50,33,-50,34,-50,35,-50,36,-50,37,-50});
    states[31] = new State(new int[]{28,32,41,47,42,48,40,49});
    states[32] = new State(new int[]{28,24,6,31,39,37,41,41,42,42,23,43,24,44,40,45},new int[]{-3,33,-4,35,-10,36,-5,23});
    states[33] = new State(new int[]{29,34,5,15,6,27});
    states[34] = new State(-56);
    states[35] = new State(new int[]{7,17,8,29,27,-48,5,-48,6,-48,29,-48,30,-48,31,-48,32,-48,33,-48,34,-48,35,-48,36,-48,37,-48});
    states[36] = new State(new int[]{9,19,10,21,7,-51,8,-51,27,-51,5,-51,6,-51,29,-51,30,-51,31,-51,32,-51,33,-51,34,-51,35,-51,36,-51,37,-51});
    states[37] = new State(new int[]{28,38,40,46});
    states[38] = new State(new int[]{28,24,6,31,39,37,41,41,42,42,23,43,24,44,40,45},new int[]{-3,39,-4,35,-10,36,-5,23});
    states[39] = new State(new int[]{29,40,5,15,6,27});
    states[40] = new State(-57);
    states[41] = new State(-58);
    states[42] = new State(-59);
    states[43] = new State(-62);
    states[44] = new State(-63);
    states[45] = new State(-64);
    states[46] = new State(-66);
    states[47] = new State(-60);
    states[48] = new State(-61);
    states[49] = new State(-65);
    states[50] = new State(new int[]{27,51});
    states[51] = new State(-44);
    states[52] = new State(-7);
    states[53] = new State(new int[]{4,54});
    states[54] = new State(new int[]{28,24,6,31,39,37,41,41,42,42,23,43,24,44,40,45},new int[]{-3,55,-4,35,-10,36,-5,23});
    states[55] = new State(new int[]{27,56,5,15,6,27});
    states[56] = new State(-45);
    states[57] = new State(-8);
    states[58] = new State(new int[]{40,59});
    states[59] = new State(new int[]{27,60});
    states[60] = new State(-39);
    states[61] = new State(new int[]{40,62});
    states[62] = new State(new int[]{27,63});
    states[63] = new State(-40);
    states[64] = new State(new int[]{40,65});
    states[65] = new State(new int[]{27,66});
    states[66] = new State(-41);
    states[67] = new State(-9);
    states[68] = new State(-17,new int[]{-19,69});
    states[69] = new State(new int[]{28,70});
    states[70] = new State(new int[]{28,111,6,31,39,37,41,41,42,42,23,104,24,105,40,106,38,116},new int[]{-20,71,-7,115,-3,92,-4,35,-10,36,-5,23});
    states[71] = new State(new int[]{29,72,36,90,37,109});
    states[72] = new State(-18,new int[]{-21,73});
    states[73] = new State(new int[]{19,11,40,53,20,58,21,61,22,64,17,68,25,76,15,86,2,121},new int[]{-2,74,-14,10,-15,52,-6,57,-9,67,-16,75,-8,79,-17,80,-22,81,-18,120});
    states[74] = new State(-19);
    states[75] = new State(-10);
    states[76] = new State(new int[]{19,11,40,53,20,58,21,61,22,64,17,68,25,76,15,86,2,121},new int[]{-1,77,-2,123,-14,10,-15,52,-6,57,-9,67,-16,75,-8,79,-17,80,-22,81,-18,120});
    states[77] = new State(new int[]{26,78,19,11,40,53,20,58,21,61,22,64,17,68,25,76,15,86,2,121},new int[]{-2,9,-14,10,-15,52,-6,57,-9,67,-16,75,-8,79,-17,80,-22,81,-18,120});
    states[78] = new State(-14);
    states[79] = new State(-11);
    states[80] = new State(-15);
    states[81] = new State(new int[]{19,11,40,53,20,58,21,61,22,64,17,68,25,76,15,86,2,121},new int[]{-2,82,-14,10,-15,52,-6,57,-9,67,-16,75,-8,79,-17,80,-22,81,-18,120});
    states[82] = new State(new int[]{16,83,26,-21,19,-21,40,-21,20,-21,21,-21,22,-21,17,-21,25,-21,15,-21,2,-21});
    states[83] = new State(-22,new int[]{-23,84});
    states[84] = new State(new int[]{19,11,40,53,20,58,21,61,22,64,17,68,25,76,15,86,2,121},new int[]{-2,85,-14,10,-15,52,-6,57,-9,67,-16,75,-8,79,-17,80,-22,81,-18,120});
    states[85] = new State(-23);
    states[86] = new State(new int[]{28,87});
    states[87] = new State(new int[]{28,111,6,31,39,37,41,41,42,42,23,104,24,105,40,106,38,116},new int[]{-20,88,-7,115,-3,92,-4,35,-10,36,-5,23});
    states[88] = new State(new int[]{29,89,36,90,37,109});
    states[89] = new State(-20);
    states[90] = new State(new int[]{28,24,6,31,39,37,41,41,42,42,23,104,24,105,40,106,38,107},new int[]{-7,91,-3,92,-4,35,-10,36,-5,23});
    states[91] = new State(-24);
    states[92] = new State(new int[]{30,93,5,15,6,27,31,95,32,97,33,99,34,101,35,103});
    states[93] = new State(new int[]{28,24,6,31,39,37,41,41,42,42,23,43,24,44,40,45},new int[]{-3,94,-4,35,-10,36,-5,23});
    states[94] = new State(new int[]{5,15,6,27,29,-29,36,-29,37,-29});
    states[95] = new State(new int[]{28,24,6,31,39,37,41,41,42,42,23,43,24,44,40,45},new int[]{-3,96,-4,35,-10,36,-5,23});
    states[96] = new State(new int[]{5,15,6,27,29,-30,36,-30,37,-30});
    states[97] = new State(new int[]{28,24,6,31,39,37,41,41,42,42,23,43,24,44,40,45},new int[]{-3,98,-4,35,-10,36,-5,23});
    states[98] = new State(new int[]{5,15,6,27,29,-31,36,-31,37,-31});
    states[99] = new State(new int[]{28,24,6,31,39,37,41,41,42,42,23,43,24,44,40,45},new int[]{-3,100,-4,35,-10,36,-5,23});
    states[100] = new State(new int[]{5,15,6,27,29,-32,36,-32,37,-32});
    states[101] = new State(new int[]{28,24,6,31,39,37,41,41,42,42,23,43,24,44,40,45},new int[]{-3,102,-4,35,-10,36,-5,23});
    states[102] = new State(new int[]{5,15,6,27,29,-33,36,-33,37,-33});
    states[103] = new State(-34);
    states[104] = new State(new int[]{9,-62,10,-62,7,-62,8,-62,30,-62,5,-62,6,-62,31,-62,32,-62,33,-62,34,-62,35,-62,29,-35,36,-35,37,-35});
    states[105] = new State(new int[]{9,-63,10,-63,7,-63,8,-63,30,-63,5,-63,6,-63,31,-63,32,-63,33,-63,34,-63,35,-63,29,-36,36,-36,37,-36});
    states[106] = new State(new int[]{9,-64,10,-64,7,-64,8,-64,30,-64,5,-64,6,-64,31,-64,32,-64,33,-64,34,-64,35,-64,29,-37,36,-37,37,-37});
    states[107] = new State(new int[]{40,108});
    states[108] = new State(-38);
    states[109] = new State(new int[]{28,24,6,31,39,37,41,41,42,42,23,104,24,105,40,106,38,107},new int[]{-7,110,-3,92,-4,35,-10,36,-5,23});
    states[110] = new State(-25);
    states[111] = new State(new int[]{28,111,6,31,39,37,41,41,42,42,23,104,24,105,40,106,38,116},new int[]{-20,112,-3,114,-7,115,-4,35,-10,36,-5,23});
    states[112] = new State(new int[]{29,113,36,90,37,109});
    states[113] = new State(-26);
    states[114] = new State(new int[]{29,26,30,93,5,15,6,27,31,95,32,97,33,99,34,101,35,103});
    states[115] = new State(-27);
    states[116] = new State(new int[]{40,108,28,117});
    states[117] = new State(new int[]{28,111,6,31,39,37,41,41,42,42,23,104,24,105,40,106,38,116},new int[]{-20,118,-7,115,-3,92,-4,35,-10,36,-5,23});
    states[118] = new State(new int[]{29,119,36,90,37,109});
    states[119] = new State(-28);
    states[120] = new State(-16);
    states[121] = new State(new int[]{13,122,26,-12,19,-12,40,-12,20,-12,21,-12,22,-12,17,-12,25,-12,15,-12,2,-12,16,-12});
    states[122] = new State(-13);
    states[123] = new State(-5);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-12, new int[]{-11,3});
    rules[2] = new Rule(-13, new int[]{});
    rules[3] = new Rule(-11, new int[]{11,25,-1,26,-13,13});
    rules[4] = new Rule(-1, new int[]{-1,-2});
    rules[5] = new Rule(-1, new int[]{-2});
    rules[6] = new Rule(-2, new int[]{-14});
    rules[7] = new Rule(-2, new int[]{-15});
    rules[8] = new Rule(-2, new int[]{-6});
    rules[9] = new Rule(-2, new int[]{-9});
    rules[10] = new Rule(-2, new int[]{-16});
    rules[11] = new Rule(-2, new int[]{-8});
    rules[12] = new Rule(-2, new int[]{2});
    rules[13] = new Rule(-2, new int[]{2,13});
    rules[14] = new Rule(-16, new int[]{25,-1,26});
    rules[15] = new Rule(-8, new int[]{-17});
    rules[16] = new Rule(-8, new int[]{-18});
    rules[17] = new Rule(-19, new int[]{});
    rules[18] = new Rule(-21, new int[]{});
    rules[19] = new Rule(-9, new int[]{17,-19,28,-20,29,-21,-2});
    rules[20] = new Rule(-22, new int[]{15,28,-20,29});
    rules[21] = new Rule(-18, new int[]{-22,-2});
    rules[22] = new Rule(-23, new int[]{});
    rules[23] = new Rule(-17, new int[]{-22,-2,16,-23,-2});
    rules[24] = new Rule(-20, new int[]{-20,36,-7});
    rules[25] = new Rule(-20, new int[]{-20,37,-7});
    rules[26] = new Rule(-20, new int[]{28,-20,29});
    rules[27] = new Rule(-20, new int[]{-7});
    rules[28] = new Rule(-20, new int[]{38,28,-20,29});
    rules[29] = new Rule(-7, new int[]{-3,30,-3});
    rules[30] = new Rule(-7, new int[]{-3,31,-3});
    rules[31] = new Rule(-7, new int[]{-3,32,-3});
    rules[32] = new Rule(-7, new int[]{-3,33,-3});
    rules[33] = new Rule(-7, new int[]{-3,34,-3});
    rules[34] = new Rule(-7, new int[]{-3,35});
    rules[35] = new Rule(-7, new int[]{23});
    rules[36] = new Rule(-7, new int[]{24});
    rules[37] = new Rule(-7, new int[]{40});
    rules[38] = new Rule(-7, new int[]{38,40});
    rules[39] = new Rule(-6, new int[]{20,40,27});
    rules[40] = new Rule(-6, new int[]{21,40,27});
    rules[41] = new Rule(-6, new int[]{22,40,27});
    rules[42] = new Rule(-24, new int[]{});
    rules[43] = new Rule(-14, new int[]{19,-24,-3,27});
    rules[44] = new Rule(-14, new int[]{19,43,27});
    rules[45] = new Rule(-15, new int[]{40,4,-3,27});
    rules[46] = new Rule(-3, new int[]{-3,5,-4});
    rules[47] = new Rule(-3, new int[]{-3,6,-4});
    rules[48] = new Rule(-3, new int[]{-4});
    rules[49] = new Rule(-4, new int[]{-4,7,-10});
    rules[50] = new Rule(-4, new int[]{-4,8,-10});
    rules[51] = new Rule(-4, new int[]{-10});
    rules[52] = new Rule(-10, new int[]{-10,9,-10});
    rules[53] = new Rule(-10, new int[]{-10,10,-10});
    rules[54] = new Rule(-10, new int[]{-5});
    rules[55] = new Rule(-5, new int[]{28,-3,29});
    rules[56] = new Rule(-5, new int[]{6,28,-3,29});
    rules[57] = new Rule(-5, new int[]{39,28,-3,29});
    rules[58] = new Rule(-5, new int[]{41});
    rules[59] = new Rule(-5, new int[]{42});
    rules[60] = new Rule(-5, new int[]{6,41});
    rules[61] = new Rule(-5, new int[]{6,42});
    rules[62] = new Rule(-5, new int[]{23});
    rules[63] = new Rule(-5, new int[]{24});
    rules[64] = new Rule(-5, new int[]{40});
    rules[65] = new Rule(-5, new int[]{6,40});
    rules[66] = new Rule(-5, new int[]{39,40});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // Anon@1 -> /* empty */
#line 26 "kompilator.y"
           {
               //Compiler.EmitCode("// linia {0,3} :  "+Compiler.source[lineno-1],lineno);
               Compiler.EmitCode("ldstr \"\\nEnd of execution\\n\"");
               Compiler.EmitCode("call void [mscorlib]System.Console::WriteLine(string)");
               Compiler.EmitCode("");
               YYAccept();
           }
#line default
        break;
      case 4: // code -> code, stat
#line 35 "kompilator.y"
                     { ++lineno; }
#line default
        break;
      case 5: // code -> stat
#line 36 "kompilator.y"
                 { ++lineno; }
#line default
        break;
      case 12: // stat -> error
#line 40 "kompilator.y"
          {
               Console.WriteLine("  line {0,3}:  syntax error",lineno);
               ++Compiler.errors;
               yyerrok();
          }
#line default
        break;
      case 13: // stat -> error, Eof
#line 46 "kompilator.y"
          {
               Console.WriteLine("  line {0,3}:  syntax error",lineno);
               ++Compiler.errors;
               yyerrok();
               YYAccept();
          }
#line default
        break;
      case 17: // Anon@2 -> /* empty */
#line 58 "kompilator.y"
            { 
                deeplevel++;
                if (deeplevel == 1)
                    temp = Compiler.NewTemp();
                Compiler.EmitCode("{0}:", temp + "_" + deeplevel.ToString());
            }
#line default
        break;
      case 18: // Anon@3 -> /* empty */
#line 65 "kompilator.y"
            { 
                if (deeplevel == 1)
                    temp2 = Compiler.NewTemp();
                Compiler.EmitCode("brfalse {0}", temp2 + "_" + deeplevel.ToString()); 
            }
#line default
        break;
      case 19: // while -> While, Anon@2, OpenPar, fullbool, ClosePar, Anon@3, stat
#line 71 "kompilator.y"
            { 
                Compiler.EmitCode("br {0}", temp + "_" + deeplevel.ToString());
                Compiler.EmitCode("{0}:", temp2 + "_" + deeplevel.ToString());
                deeplevel--;
            }
#line default
        break;
      case 20: // ifhead -> If, OpenPar, fullbool, ClosePar
#line 78 "kompilator.y"
            {
                deeplevel++;
                if (deeplevel == 1)
                    temp = Compiler.NewTemp();
                Compiler.EmitCode("brfalse {0}", temp + "_" + deeplevel.ToString());
            }
#line default
        break;
      case 21: // if -> ifhead, stat
#line 87 "kompilator.y"
            { 
                
                Compiler.EmitCode("{0}:", temp + "_" + deeplevel.ToString());
                deeplevel--;
            }
#line default
        break;
      case 22: // Anon@4 -> /* empty */
#line 96 "kompilator.y"
            {
               
                if (deeplevel == 1)
                    temp2 = Compiler.NewTemp();
                Compiler.EmitCode("br {0}", temp2 + "_" + deeplevel.ToString());
                Compiler.EmitCode("{0}:", temp + "_" + deeplevel.ToString());
            }
#line default
        break;
      case 23: // ifelse -> ifhead, stat, Else, Anon@4, stat
#line 104 "kompilator.y"
            {
                Compiler.EmitCode("{0}:", temp2 + "_" + deeplevel.ToString());
                deeplevel--;
            }
#line default
        break;
      case 24: // fullbool -> fullbool, And, bool
#line 110 "kompilator.y"
            {
                 Compiler.EmitCode("and");
            }
#line default
        break;
      case 25: // fullbool -> fullbool, Or, bool
#line 114 "kompilator.y"
            {
                 Compiler.EmitCode("or");
            }
#line default
        break;
      case 28: // fullbool -> Exclamation, OpenPar, fullbool, ClosePar
#line 120 "kompilator.y"
            {
                    Compiler.EmitCode("ldc.i4 1");
                    Compiler.EmitCode("sub");
            }
#line default
        break;
      case 29: // bool -> exp, Equal, exp
#line 126 "kompilator.y"
            {
                Compiler.EmitCode("ceq");
            }
#line default
        break;
      case 30: // bool -> exp, NotEqual, exp
#line 130 "kompilator.y"
            {
                Compiler.EmitCode("ceq");
                Compiler.EmitCode("neg");
            }
#line default
        break;
      case 31: // bool -> exp, Greater, exp
#line 135 "kompilator.y"
            {
                Compiler.EmitCode("cgt");
            }
#line default
        break;
      case 32: // bool -> exp, GreaterEqual, exp
#line 139 "kompilator.y"
            {
                
            }
#line default
        break;
      case 33: // bool -> exp, Less, exp
#line 143 "kompilator.y"
            {
                Compiler.EmitCode("clt");
            }
#line default
        break;
      case 34: // bool -> exp, LessEqual
#line 147 "kompilator.y"
            {
            }
#line default
        break;
      case 35: // bool -> True
#line 150 "kompilator.y"
            {
                Compiler.EmitCode("ldc.i4 1"); 
            }
#line default
        break;
      case 36: // bool -> False
#line 154 "kompilator.y"
            {
                Compiler.EmitCode("ldc.i4 0");
            }
#line default
        break;
      case 37: // bool -> Ident
#line 158 "kompilator.y"
            {
                if (Compiler.symbolTable.ContainsKey(ValueStack[ValueStack.Depth-1].val))
                {
                    if (Compiler.symbolTable[ValueStack[ValueStack.Depth-1].val] == "bool")
                    {
                        Compiler.EmitCode("ldloc {0}", ValueStack[ValueStack.Depth-1].val);
                    }
                    else
                    {
                        Console.WriteLine("line {0,3}:  only bool variables can be used that way", lineno);
                        Compiler.errors++;
                    }
                }
                else
                {
                    Console.WriteLine("line {0,3}:  use of undeclared variable!", lineno);
                    Compiler.errors++;
                }
            }
#line default
        break;
      case 38: // bool -> Exclamation, Ident
#line 178 "kompilator.y"
            {
                if (Compiler.symbolTable.ContainsKey(ValueStack[ValueStack.Depth-1].val))
                {
                    if (Compiler.symbolTable[ValueStack[ValueStack.Depth-1].val] == "bool")
                    {
                        Compiler.EmitCode("ldloc {0}", ValueStack[ValueStack.Depth-1].val);
                        Compiler.EmitCode("ldc.i4 1");
                        Compiler.EmitCode("sub");
                    }
                    else
                    {
                        Console.WriteLine("line {0,3}:  only bool variables can be used with !", lineno);
                        Compiler.errors++;
                    }
                }
                else
                {
                    Console.WriteLine("line {0,3}:  use of undeclared variable!", lineno);
                    Compiler.errors++;
                }
            }
#line default
        break;
      case 39: // declare -> Int, Ident, Semicolon
#line 201 "kompilator.y"
            {
                if (System.Linq.Enumerable.All(Compiler.symbolTable.Keys, ident => ident != ValueStack[ValueStack.Depth-2].val))
                {
                    Compiler.EmitCode(".locals init ( int32 {0} )", ValueStack[ValueStack.Depth-2].val);
                    Compiler.symbolTable.Add(ValueStack[ValueStack.Depth-2].val, "int");
                }
                else
                {
                    Console.WriteLine("line {0,3}:  variable already declared!", lineno);
                    Compiler.errors++;
                }

            }
#line default
        break;
      case 40: // declare -> Double, Ident, Semicolon
#line 215 "kompilator.y"
            {
                if (System.Linq.Enumerable.All(Compiler.symbolTable.Keys, ident => ident != ValueStack[ValueStack.Depth-2].val))
                {
                    Compiler.EmitCode(".locals init ( float64 {0} )", ValueStack[ValueStack.Depth-2].val);
                    Compiler.symbolTable.Add(ValueStack[ValueStack.Depth-2].val, "double");
                }
                else
                {
                    Console.WriteLine("line {0,3}:  variable already declared!", lineno);
                    Compiler.errors++;
                }
            }
#line default
        break;
      case 41: // declare -> Bool, Ident, Semicolon
#line 228 "kompilator.y"
            {
                if (System.Linq.Enumerable.All(Compiler.symbolTable.Keys, ident => ident != ValueStack[ValueStack.Depth-2].val))
                {
                    Compiler.EmitCode(".locals init ( int32 {0} )", ValueStack[ValueStack.Depth-2].val);
                    Compiler.symbolTable.Add(ValueStack[ValueStack.Depth-2].val, "bool");
                }
                else
                {
                    Console.WriteLine("line {0,3}:  variable already declared!", lineno);
                    Compiler.errors++;
                }
            }
#line default
        break;
      case 42: // Anon@5 -> /* empty */
#line 242 "kompilator.y"
            {
               Compiler.EmitCode("ldstr \"{0}\"");
            }
#line default
        break;
      case 43: // write -> Write, Anon@5, exp, Semicolon
#line 246 "kompilator.y"
            {
               Compiler.EmitCode("box [mscorlib]System.{0}",ValueStack[ValueStack.Depth-2].type=='i'?"Int32":"Double");
               Compiler.EmitCode("ldstr \"{0}\"",ValueStack[ValueStack.Depth-2].type=='i'?"i":"r");
               Compiler.EmitCode("call void [mscorlib]System.Console::Write(string,object,object)");
               Compiler.EmitCode("");
            }
#line default
        break;
      case 44: // write -> Write, String, Semicolon
#line 253 "kompilator.y"
            {
                Compiler.EmitCode("ldstr {0}", ValueStack[ValueStack.Depth-2].val);
                Compiler.EmitCode("call void [mscorlib]System.Console::Write(string)");
            }
#line default
        break;
      case 45: // assign -> Ident, Assign, exp, Semicolon
#line 259 "kompilator.y"
            {
               if (!Compiler.symbolTable.ContainsKey(ValueStack[ValueStack.Depth-4].val)) 
               {
                    Console.WriteLine("line {0,3}: error - use of undeclared variable", lineno);
               }
               else
               {
                    if (Compiler.symbolTable[ValueStack[ValueStack.Depth-4].val]=="int" && ValueStack[ValueStack.Depth-2].type != 'i')
                    {
                        Console.WriteLine("line {0,3}:  semantic error - cannot convert to int (use convert operator)",lineno);
                        ++Compiler.errors;
                    } 
                    else if (Compiler.symbolTable[ValueStack[ValueStack.Depth-4].val]=="double" && ValueStack[ValueStack.Depth-2].type != 'd' && ValueStack[ValueStack.Depth-2].type != 'i')
                    {
                        Console.WriteLine("line {0,3}:  semantic error - cannot convert to double (use convert operator)",lineno);
                        ++Compiler.errors;
                    }
                    else if (Compiler.symbolTable[ValueStack[ValueStack.Depth-4].val]=="bool" && ValueStack[ValueStack.Depth-2].type != 'b')
                    {
                        Console.WriteLine("line {0,3}:  semantic error - cannot convert to bool (use convert operator)",lineno);
                        ++Compiler.errors;
                    }
                    else
                    {
                        Compiler.EmitCode("stloc {0}", ValueStack[ValueStack.Depth-4].val);
                    }
               }
            }
#line default
        break;
      case 46: // exp -> exp, Plus, term
#line 289 "kompilator.y"
               { CurrentSemanticValue.type = BinaryOpGenCode(Tokens.Plus, ValueStack[ValueStack.Depth-3].type, ValueStack[ValueStack.Depth-1].type); }
#line default
        break;
      case 47: // exp -> exp, Minus, term
#line 291 "kompilator.y"
               { CurrentSemanticValue.type = BinaryOpGenCode(Tokens.Minus, ValueStack[ValueStack.Depth-3].type, ValueStack[ValueStack.Depth-1].type); }
#line default
        break;
      case 48: // exp -> term
#line 293 "kompilator.y"
               { CurrentSemanticValue.type = ValueStack[ValueStack.Depth-1].type; }
#line default
        break;
      case 49: // term -> term, Multiplies, log
#line 297 "kompilator.y"
               { CurrentSemanticValue.type = BinaryOpGenCode(Tokens.Multiplies, ValueStack[ValueStack.Depth-3].type, ValueStack[ValueStack.Depth-1].type); }
#line default
        break;
      case 50: // term -> term, Divides, log
#line 299 "kompilator.y"
               { CurrentSemanticValue.type = BinaryOpGenCode(Tokens.Divides, ValueStack[ValueStack.Depth-3].type, ValueStack[ValueStack.Depth-1].type); }
#line default
        break;
      case 51: // term -> log
#line 301 "kompilator.y"
               { CurrentSemanticValue.type = ValueStack[ValueStack.Depth-1].type; }
#line default
        break;
      case 52: // log -> log, SumLog, log
#line 304 "kompilator.y"
               { CurrentSemanticValue.type = BinaryOpGenCode(Tokens.SumLog, ValueStack[ValueStack.Depth-3].type, ValueStack[ValueStack.Depth-1].type); }
#line default
        break;
      case 53: // log -> log, IlLog, log
#line 306 "kompilator.y"
               { CurrentSemanticValue.type = BinaryOpGenCode(Tokens.IlLog, ValueStack[ValueStack.Depth-3].type, ValueStack[ValueStack.Depth-1].type); }
#line default
        break;
      case 54: // log -> factor
#line 308 "kompilator.y"
               { CurrentSemanticValue.type = ValueStack[ValueStack.Depth-1].type; }
#line default
        break;
      case 55: // factor -> OpenPar, exp, ClosePar
#line 311 "kompilator.y"
               { CurrentSemanticValue.type = ValueStack[ValueStack.Depth-2].type; }
#line default
        break;
      case 56: // factor -> Minus, OpenPar, exp, ClosePar
#line 313 "kompilator.y"
          {
            CurrentSemanticValue.type = ValueStack[ValueStack.Depth-2].type;
            Compiler.EmitCode("neg");
          }
#line default
        break;
      case 57: // factor -> Neg, OpenPar, exp, ClosePar
#line 318 "kompilator.y"
          {
            CurrentSemanticValue.type = ValueStack[ValueStack.Depth-2].type;
            Compiler.EmitCode("not");
          }
#line default
        break;
      case 58: // factor -> IntNumber
#line 323 "kompilator.y"
          {
               Compiler.EmitCode("ldc.i4 {0}",int.Parse(ValueStack[ValueStack.Depth-1].val));
               CurrentSemanticValue.type = 'i'; 
          }
#line default
        break;
      case 59: // factor -> RealNumber
#line 328 "kompilator.y"
          {
               double d = double.Parse(ValueStack[ValueStack.Depth-1].val,System.Globalization.CultureInfo.InvariantCulture);
               Compiler.EmitCode(string.Format(System.Globalization.CultureInfo.InvariantCulture,"ldc.r8 {0}",d));
               CurrentSemanticValue.type = 'd'; 
          }
#line default
        break;
      case 60: // factor -> Minus, IntNumber
#line 334 "kompilator.y"
          {
               Compiler.EmitCode("ldc.i4 {0}",int.Parse(ValueStack[ValueStack.Depth-1].val) * -1);
               CurrentSemanticValue.type = 'i'; 
          }
#line default
        break;
      case 61: // factor -> Minus, RealNumber
#line 339 "kompilator.y"
          {
               double d = double.Parse(ValueStack[ValueStack.Depth-1].val,System.Globalization.CultureInfo.InvariantCulture) * -1;
               Compiler.EmitCode(string.Format(System.Globalization.CultureInfo.InvariantCulture,"ldc.r8 {0}",d));
               CurrentSemanticValue.type = 'd'; 
          }
#line default
        break;
      case 62: // factor -> True
#line 345 "kompilator.y"
          {
                neg=1;
                Compiler.EmitCode("ldc.i4 1");
                CurrentSemanticValue.type = 'b';
          }
#line default
        break;
      case 63: // factor -> False
#line 351 "kompilator.y"
          {
                neg=1;
                Compiler.EmitCode("ldc.i4 0");
                CurrentSemanticValue.type = 'b';
          }
#line default
        break;
      case 64: // factor -> Ident
#line 357 "kompilator.y"
          {

               Compiler.EmitCode("ldloc {0}", ValueStack[ValueStack.Depth-1].val);
               switch(Compiler.symbolTable[ValueStack[ValueStack.Depth-1].val])
               {
                    case "int":
                        CurrentSemanticValue.type = 'i';
                        break;
                    case "double":
                        CurrentSemanticValue.type = 'd';
                        break;
                    case "bool":
                        CurrentSemanticValue.type = 'b';
                        break;
                    default:
                        Console.WriteLine("line {0,3}:  unrecognized type",lineno);
                        Compiler.errors++;
                        break;
               }
          }
#line default
        break;
      case 65: // factor -> Minus, Ident
#line 378 "kompilator.y"
          {
               if (Compiler.symbolTable[ValueStack[ValueStack.Depth-1].val] != "int" && Compiler.symbolTable[ValueStack[ValueStack.Depth-1].val] != "double")
               {
                    Console.WriteLine("line {0,3}: cannot use - operator to bool variable", lineno);
                    Compiler.errors++;
               }
               else
               {
                   Compiler.EmitCode("ldloc {0}", ValueStack[ValueStack.Depth-1].val);
                   Compiler.EmitCode("neg");
                   switch(Compiler.symbolTable[ValueStack[ValueStack.Depth-1].val])
                   {
                        case "int":
                            CurrentSemanticValue.type = 'i';
                            break;
                        case "double":
                            CurrentSemanticValue.type = 'd';
                            break;
                        default:
                            Console.WriteLine("line {0,3}:  unrecognized type",lineno);
                            Compiler.errors++;
                            break;
                   }
               }
          }
#line default
        break;
      case 66: // factor -> Neg, Ident
#line 404 "kompilator.y"
          {
               if (Compiler.symbolTable[ValueStack[ValueStack.Depth-1].val] != "int" && Compiler.symbolTable[ValueStack[ValueStack.Depth-1].val] != "double")
               {
                    Console.WriteLine("line {0,3}: cannot use ~ operator to bool variable", lineno);
                    Compiler.errors++;
               }
               else
               {
                   Compiler.EmitCode("ldloc {0}", ValueStack[ValueStack.Depth-1].val);
                   Compiler.EmitCode("not");
                   switch(Compiler.symbolTable[ValueStack[ValueStack.Depth-1].val])
                   {
                        case "int":
                            CurrentSemanticValue.type = 'i';
                            break;
                        case "double":
                            CurrentSemanticValue.type = 'd';
                            break;
                        default:
                            Console.WriteLine("line {0,3}:  unrecognized type",lineno);
                            Compiler.errors++;
                            break;
                   }
               }
          }
#line default
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 432 "kompilator.y"

int lineno = 1;
int neg = 1;
string temp;
string temp2;
int deeplevel = 0;

public Parser(Scanner scanner) : base(scanner) { }

private char BinaryOpGenCode(Tokens t, char type1, char type2)
    {
    char type = ( type1=='i' && type2=='i' ) ? 'i' : 'r' ;
    if ( type1!=type )
        {
        Compiler.EmitCode("stloc temp");
        Compiler.EmitCode("conv.r8");
        Compiler.EmitCode("ldloc temp");
        }
    if ( type2!=type )
        Compiler.EmitCode("conv.r8");
    switch ( t )
        {
        case Tokens.Plus:
            Compiler.EmitCode("add");
            break;
        case Tokens.Minus:
            Compiler.EmitCode("sub");
            break;
        case Tokens.Multiplies:
            Compiler.EmitCode("mul");
            break;
        case Tokens.Divides:
            Compiler.EmitCode("div");
            break;
        case Tokens.SumLog:
            Compiler.EmitCode("or");
            break;
        case Tokens.IlLog:
            Compiler.EmitCode("and");
            break;
        default:
            Console.WriteLine($"  line {lineno,3}:  internal gencode error");
            ++Compiler.errors;
            break;
        }
    return type;
    }
#line default
}
}
