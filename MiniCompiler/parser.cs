// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  DESKTOP-EC4UU67
// DateTime: 23.05.2020 17:07:20
// UserName: tomek
// Input file <kompilator.y - 23.05.2020 17:07:14>

// options: lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace GardensPoint
{
public enum Tokens {error=2,EOF=3,Assign=4,Plus=5,Minus=6,
    Multiplies=7,Divides=8,Program=9,Return=10,Eof=11,Error=12,
    If=13,Else=14,While=15,Read=16,Write=17,Int=18,
    Double=19,Bool=20,True=21,False=22,OpenBracket=23,CloseBracket=24,
    Semicolon=25,OpenPar=26,ClosePar=27,Equal=28,NotEqual=29,Greater=30,
    GreaterEqual=31,Less=32,LessEqual=33,Ident=34,IntNumber=35,RealNumber=36};

public struct ValueType
#line 7 "kompilator.y"
{
public string  val;
public char    type;
}
#line default
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[41];
  private static State[] states = new State[78];
  private static string[] nonTerms = new string[] {
      "code", "stat", "exp", "term", "factor", "declare", "bool", "cond", "start", 
      "$accept", "Anon@1", "write", "assign", "if", "Anon@2", "Anon@3", "Anon@4", 
      };

  static Parser() {
    states[0] = new State(new int[]{9,3},new int[]{-9,1});
    states[1] = new State(new int[]{3,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{23,4});
    states[4] = new State(new int[]{17,11,34,32,18,37,19,40,20,43,13,53,2,61},new int[]{-1,5,-2,63,-12,10,-13,31,-6,36,-8,46,-14,47});
    states[5] = new State(new int[]{24,6,17,11,34,32,18,37,19,40,20,43,13,53,2,61},new int[]{-2,9,-12,10,-13,31,-6,36,-8,46,-14,47});
    states[6] = new State(-2,new int[]{-11,7});
    states[7] = new State(new int[]{11,8});
    states[8] = new State(-3);
    states[9] = new State(-4);
    states[10] = new State(-6);
    states[11] = new State(-28,new int[]{-17,12});
    states[12] = new State(new int[]{26,19,35,26,36,27,34,28},new int[]{-3,13,-4,30,-5,29});
    states[13] = new State(new int[]{25,14,5,15,6,22});
    states[14] = new State(-29);
    states[15] = new State(new int[]{26,19,35,26,36,27,34,28},new int[]{-4,16,-5,29});
    states[16] = new State(new int[]{7,17,8,24,25,-31,5,-31,6,-31,27,-31,28,-31,29,-31,30,-31,31,-31,32,-31,33,-31});
    states[17] = new State(new int[]{26,19,35,26,36,27,34,28},new int[]{-5,18});
    states[18] = new State(-34);
    states[19] = new State(new int[]{26,19,35,26,36,27,34,28},new int[]{-3,20,-4,30,-5,29});
    states[20] = new State(new int[]{27,21,5,15,6,22});
    states[21] = new State(-37);
    states[22] = new State(new int[]{26,19,35,26,36,27,34,28},new int[]{-4,23,-5,29});
    states[23] = new State(new int[]{7,17,8,24,25,-32,5,-32,6,-32,27,-32,28,-32,29,-32,30,-32,31,-32,32,-32,33,-32});
    states[24] = new State(new int[]{26,19,35,26,36,27,34,28},new int[]{-5,25});
    states[25] = new State(-35);
    states[26] = new State(-38);
    states[27] = new State(-39);
    states[28] = new State(-40);
    states[29] = new State(-36);
    states[30] = new State(new int[]{7,17,8,24,25,-33,5,-33,6,-33,27,-33,28,-33,29,-33,30,-33,31,-33,32,-33,33,-33});
    states[31] = new State(-7);
    states[32] = new State(new int[]{4,33});
    states[33] = new State(new int[]{26,19,35,26,36,27,34,28},new int[]{-3,34,-4,30,-5,29});
    states[34] = new State(new int[]{25,35,5,15,6,22});
    states[35] = new State(-30);
    states[36] = new State(-8);
    states[37] = new State(new int[]{34,38});
    states[38] = new State(new int[]{25,39});
    states[39] = new State(-25);
    states[40] = new State(new int[]{34,41});
    states[41] = new State(new int[]{25,42});
    states[42] = new State(-26);
    states[43] = new State(new int[]{34,44});
    states[44] = new State(new int[]{25,45});
    states[45] = new State(-27);
    states[46] = new State(-9);
    states[47] = new State(new int[]{24,-12,17,-12,34,-12,18,-12,19,-12,20,-12,13,-12,2,-12,14,-13},new int[]{-15,48});
    states[48] = new State(new int[]{14,49});
    states[49] = new State(new int[]{23,50});
    states[50] = new State(new int[]{17,11,34,32,18,37,19,40,20,43,13,53,2,61},new int[]{-1,51,-2,63,-12,10,-13,31,-6,36,-8,46,-14,47});
    states[51] = new State(new int[]{24,52,17,11,34,32,18,37,19,40,20,43,13,53,2,61},new int[]{-2,9,-12,10,-13,31,-6,36,-8,46,-14,47});
    states[52] = new State(-14);
    states[53] = new State(new int[]{26,54});
    states[54] = new State(new int[]{26,19,35,26,36,27,34,28,21,76,22,77},new int[]{-7,55,-3,64,-4,30,-5,29});
    states[55] = new State(new int[]{27,56});
    states[56] = new State(new int[]{23,57});
    states[57] = new State(-15,new int[]{-16,58});
    states[58] = new State(new int[]{17,11,34,32,18,37,19,40,20,43,13,53,2,61},new int[]{-1,59,-2,63,-12,10,-13,31,-6,36,-8,46,-14,47});
    states[59] = new State(new int[]{24,60,17,11,34,32,18,37,19,40,20,43,13,53,2,61},new int[]{-2,9,-12,10,-13,31,-6,36,-8,46,-14,47});
    states[60] = new State(-16);
    states[61] = new State(new int[]{11,62,24,-10,17,-10,34,-10,18,-10,19,-10,20,-10,13,-10,2,-10});
    states[62] = new State(-11);
    states[63] = new State(-5);
    states[64] = new State(new int[]{28,65,5,15,6,22,29,67,30,69,31,71,32,73,33,75});
    states[65] = new State(new int[]{26,19,35,26,36,27,34,28},new int[]{-3,66,-4,30,-5,29});
    states[66] = new State(new int[]{5,15,6,22,27,-17});
    states[67] = new State(new int[]{26,19,35,26,36,27,34,28},new int[]{-3,68,-4,30,-5,29});
    states[68] = new State(new int[]{5,15,6,22,27,-18});
    states[69] = new State(new int[]{26,19,35,26,36,27,34,28},new int[]{-3,70,-4,30,-5,29});
    states[70] = new State(new int[]{5,15,6,22,27,-19});
    states[71] = new State(new int[]{26,19,35,26,36,27,34,28},new int[]{-3,72,-4,30,-5,29});
    states[72] = new State(new int[]{5,15,6,22,27,-20});
    states[73] = new State(new int[]{26,19,35,26,36,27,34,28},new int[]{-3,74,-4,30,-5,29});
    states[74] = new State(new int[]{5,15,6,22,27,-21});
    states[75] = new State(-22);
    states[76] = new State(-23);
    states[77] = new State(-24);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-10, new int[]{-9,3});
    rules[2] = new Rule(-11, new int[]{});
    rules[3] = new Rule(-9, new int[]{9,23,-1,24,-11,11});
    rules[4] = new Rule(-1, new int[]{-1,-2});
    rules[5] = new Rule(-1, new int[]{-2});
    rules[6] = new Rule(-2, new int[]{-12});
    rules[7] = new Rule(-2, new int[]{-13});
    rules[8] = new Rule(-2, new int[]{-6});
    rules[9] = new Rule(-2, new int[]{-8});
    rules[10] = new Rule(-2, new int[]{2});
    rules[11] = new Rule(-2, new int[]{2,11});
    rules[12] = new Rule(-8, new int[]{-14});
    rules[13] = new Rule(-15, new int[]{});
    rules[14] = new Rule(-8, new int[]{-14,-15,14,23,-1,24});
    rules[15] = new Rule(-16, new int[]{});
    rules[16] = new Rule(-14, new int[]{13,26,-7,27,23,-16,-1,24});
    rules[17] = new Rule(-7, new int[]{-3,28,-3});
    rules[18] = new Rule(-7, new int[]{-3,29,-3});
    rules[19] = new Rule(-7, new int[]{-3,30,-3});
    rules[20] = new Rule(-7, new int[]{-3,31,-3});
    rules[21] = new Rule(-7, new int[]{-3,32,-3});
    rules[22] = new Rule(-7, new int[]{-3,33});
    rules[23] = new Rule(-7, new int[]{21});
    rules[24] = new Rule(-7, new int[]{22});
    rules[25] = new Rule(-6, new int[]{18,34,25});
    rules[26] = new Rule(-6, new int[]{19,34,25});
    rules[27] = new Rule(-6, new int[]{20,34,25});
    rules[28] = new Rule(-17, new int[]{});
    rules[29] = new Rule(-12, new int[]{17,-17,-3,25});
    rules[30] = new Rule(-13, new int[]{34,4,-3,25});
    rules[31] = new Rule(-3, new int[]{-3,5,-4});
    rules[32] = new Rule(-3, new int[]{-3,6,-4});
    rules[33] = new Rule(-3, new int[]{-4});
    rules[34] = new Rule(-4, new int[]{-4,7,-5});
    rules[35] = new Rule(-4, new int[]{-4,8,-5});
    rules[36] = new Rule(-4, new int[]{-5});
    rules[37] = new Rule(-5, new int[]{26,-3,27});
    rules[38] = new Rule(-5, new int[]{35});
    rules[39] = new Rule(-5, new int[]{36});
    rules[40] = new Rule(-5, new int[]{34});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // Anon@1 -> /* empty */
#line 26 "kompilator.y"
                {
               //Compiler.EmitCode("// linia {0,3} :  "+Compiler.source[lineno-1],lineno);
               Compiler.EmitCode("ldstr \"\\nEnd of execution\\n\"");
               Compiler.EmitCode("call void [mscorlib]System.Console::WriteLine(string)");
               Compiler.EmitCode("");
               YYAccept();
               }
#line default
        break;
      case 4: // code -> code, stat
#line 35 "kompilator.y"
                     { ++lineno; }
#line default
        break;
      case 5: // code -> stat
#line 36 "kompilator.y"
                 { ++lineno; }
#line default
        break;
      case 10: // stat -> error
#line 41 "kompilator.y"
               {
               Console.WriteLine("  line {0,3}:  syntax error",lineno);
               ++Compiler.errors;
               yyerrok();
               }
#line default
        break;
      case 11: // stat -> error, Eof
#line 47 "kompilator.y"
               {
               Console.WriteLine("  line {0,3}:  syntax error",lineno);
               ++Compiler.errors;
               yyerrok();
               YYAccept();
               }
#line default
        break;
      case 13: // Anon@2 -> /* empty */
#line 54 "kompilator.y"
                    { Compiler.EmitCode("br elseend"); }
#line default
        break;
      case 14: // cond -> if, Anon@2, Else, OpenBracket, code, CloseBracket
#line 54 "kompilator.y"
                                                                                            { Compiler.EmitCode("elseend:"); }
#line default
        break;
      case 15: // Anon@3 -> /* empty */
#line 57 "kompilator.y"
                                                 { Compiler.EmitCode("brfalse endif"); }
#line default
        break;
      case 16: // if -> If, OpenPar, bool, ClosePar, OpenBracket, Anon@3, code, CloseBracket
#line 57 "kompilator.y"
                                                                                                           { Compiler.EmitCode("endif:"); }
#line default
        break;
      case 17: // bool -> exp, Equal, exp
#line 60 "kompilator.y"
            {
                Compiler.EmitCode("ceq");
            }
#line default
        break;
      case 18: // bool -> exp, NotEqual, exp
#line 64 "kompilator.y"
            {
                Compiler.EmitCode("ceq");
                Compiler.EmitCode("neg");
            }
#line default
        break;
      case 19: // bool -> exp, Greater, exp
#line 69 "kompilator.y"
            {
                Compiler.EmitCode("cgt");
            }
#line default
        break;
      case 20: // bool -> exp, GreaterEqual, exp
#line 73 "kompilator.y"
            {
                
            }
#line default
        break;
      case 21: // bool -> exp, Less, exp
#line 77 "kompilator.y"
            {
                Compiler.EmitCode("clt");
            }
#line default
        break;
      case 22: // bool -> exp, LessEqual
#line 81 "kompilator.y"
            {
            }
#line default
        break;
      case 25: // declare -> Int, Ident, Semicolon
#line 87 "kompilator.y"
            {
                Compiler.EmitCode(".locals init ( int32 i{0} )", ValueStack[ValueStack.Depth-2].val);

            }
#line default
        break;
      case 26: // declare -> Double, Ident, Semicolon
#line 92 "kompilator.y"
            {
                Compiler.EmitCode(".locals init ( float64 f{0} )", ValueStack[ValueStack.Depth-2].val);
                Compiler.EmitCode("ldc.r8 0");
                Compiler.EmitCode("stloc f{0}", ValueStack[ValueStack.Depth-2].val);
            }
#line default
        break;
      case 27: // declare -> Bool, Ident, Semicolon
#line 98 "kompilator.y"
            {
                Compiler.EmitCode(".locals init ( int32 b{0} )", ValueStack[ValueStack.Depth-2].val);
                Compiler.EmitCode("ldc.i4 0");
                Compiler.EmitCode("stloc b{0}", ValueStack[ValueStack.Depth-2].val);
            }
#line default
        break;
      case 28: // Anon@4 -> /* empty */
#line 105 "kompilator.y"
               {
               //Compiler.EmitCode("// linia {0,3} :  "+Compiler.source[lineno-1],lineno);
               Compiler.EmitCode("ldstr \"  Result: {0}{1}\"");
               }
#line default
        break;
      case 29: // write -> Write, Anon@4, exp, Semicolon
#line 110 "kompilator.y"
               {
               Compiler.EmitCode("box [mscorlib]System.{0}",ValueStack[ValueStack.Depth-2].type=='i'?"Int32":"Double");
               Compiler.EmitCode("ldstr \"{0}\"",ValueStack[ValueStack.Depth-2].type=='i'?"i":"r");
               Compiler.EmitCode("call void [mscorlib]System.Console::WriteLine(string,object,object)");
               Compiler.EmitCode("");
               }
#line default
        break;
      case 30: // assign -> Ident, Assign, exp, Semicolon
#line 118 "kompilator.y"
               {
               if ( ValueStack[ValueStack.Depth-4].val[0]=='@' && ValueStack[ValueStack.Depth-2].type!='i' )
                   {
                   Console.WriteLine("  line {0,3}:  semantic error - cannot convert real to int",lineno);
                   ++Compiler.errors;
                   }
               else
                   {
                   if ( ValueStack[ValueStack.Depth-4].val[0]=='$' && ValueStack[ValueStack.Depth-2].type!='r' )
                       Compiler.EmitCode("conv.r8");

                    Compiler.EmitCode("stloc i{0}", ValueStack[ValueStack.Depth-4].val);
                   //Compiler.EmitCode("stloc _{0}{1}", $1[0]=='@'?'i':'r', $1[1]);
                   Compiler.EmitCode("");
                   }
               }
#line default
        break;
      case 31: // exp -> exp, Plus, term
#line 136 "kompilator.y"
               { CurrentSemanticValue.type = BinaryOpGenCode(Tokens.Plus, ValueStack[ValueStack.Depth-3].type, ValueStack[ValueStack.Depth-1].type); }
#line default
        break;
      case 32: // exp -> exp, Minus, term
#line 138 "kompilator.y"
               { CurrentSemanticValue.type = BinaryOpGenCode(Tokens.Minus, ValueStack[ValueStack.Depth-3].type, ValueStack[ValueStack.Depth-1].type); }
#line default
        break;
      case 33: // exp -> term
#line 140 "kompilator.y"
               { CurrentSemanticValue.type = ValueStack[ValueStack.Depth-1].type; }
#line default
        break;
      case 34: // term -> term, Multiplies, factor
#line 144 "kompilator.y"
               { CurrentSemanticValue.type = BinaryOpGenCode(Tokens.Multiplies, ValueStack[ValueStack.Depth-3].type, ValueStack[ValueStack.Depth-1].type); }
#line default
        break;
      case 35: // term -> term, Divides, factor
#line 146 "kompilator.y"
               { CurrentSemanticValue.type = BinaryOpGenCode(Tokens.Divides, ValueStack[ValueStack.Depth-3].type, ValueStack[ValueStack.Depth-1].type); }
#line default
        break;
      case 36: // term -> factor
#line 148 "kompilator.y"
               { CurrentSemanticValue.type = ValueStack[ValueStack.Depth-1].type; }
#line default
        break;
      case 37: // factor -> OpenPar, exp, ClosePar
#line 152 "kompilator.y"
               { CurrentSemanticValue.type = ValueStack[ValueStack.Depth-2].type; }
#line default
        break;
      case 38: // factor -> IntNumber
#line 154 "kompilator.y"
               {
               Compiler.EmitCode("ldc.i4 {0}",int.Parse(ValueStack[ValueStack.Depth-1].val));
               CurrentSemanticValue.type = 'i'; 
               }
#line default
        break;
      case 39: // factor -> RealNumber
#line 159 "kompilator.y"
               {
               double d = double.Parse(ValueStack[ValueStack.Depth-1].val,System.Globalization.CultureInfo.InvariantCulture) ;
               Compiler.EmitCode(string.Format(System.Globalization.CultureInfo.InvariantCulture,"ldc.r8 {0}",d));
               CurrentSemanticValue.type = 'r'; 
               }
#line default
        break;
      case 40: // factor -> Ident
#line 165 "kompilator.y"
               {
               Compiler.EmitCode("ldloc i{0}", ValueStack[ValueStack.Depth-1].val);
               CurrentSemanticValue.type = ValueStack[ValueStack.Depth-1].val[0]=='@'?'i':'r';
               }
#line default
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 172 "kompilator.y"

int lineno=1;

public Parser(Scanner scanner) : base(scanner) { }

private char BinaryOpGenCode(Tokens t, char type1, char type2)
    {
    char type = ( type1=='i' && type2=='i' ) ? 'i' : 'r' ;
    if ( type1!=type )
        {
        Compiler.EmitCode("stloc temp");
        Compiler.EmitCode("conv.r8");
        Compiler.EmitCode("ldloc temp");
        }
    if ( type2!=type )
        Compiler.EmitCode("conv.r8");
    switch ( t )
        {
        case Tokens.Plus:
            Compiler.EmitCode("add");
            break;
        case Tokens.Minus:
            Compiler.EmitCode("sub");
            break;
        case Tokens.Multiplies:
            Compiler.EmitCode("mul");
            break;
        case Tokens.Divides:
            Compiler.EmitCode("div");
            break;
        default:
            Console.WriteLine($"  line {lineno,3}:  internal gencode error");
            ++Compiler.errors;
            break;
        }
    return type;
    }
#line default
}
}
