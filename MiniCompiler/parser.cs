// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  DESKTOP-EC4UU67
// DateTime: 28.06.2020 10:16:06
// UserName: tomek
// Input file <../../kompilator.y - 28.06.2020 10:16:05>

// options: lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace GardensPoint
{
public enum Tokens {error=2,EOF=3,Assign=4,Plus=5,Minus=6,
    Multiplies=7,Divides=8,SumLog=9,IlLog=10,Program=11,Return=12,
    Error=13,If=14,Else=15,While=16,Read=17,Write=18,
    Int=19,Double=20,Bool=21,True=22,False=23,OpenBracket=24,
    CloseBracket=25,Semicolon=26,OpenPar=27,ClosePar=28,Equal=29,NotEqual=30,
    Greater=31,GreaterEqual=32,Less=33,LessEqual=34,And=35,Or=36,
    Exclamation=37,Neg=38,Ident=39,IntNumber=40,RealNumber=41,String=42};

public struct ValueType
#line 3 "../../kompilator.y"
{
public string  val;
public char    type;
}
#line default
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[69];
  private static State[] states = new State[122];
  private static string[] nonTerms = new string[] {
      "code", "stat", "exp", "term", "factor", "declare", "cond", "while", "log", 
      "assign", "expLog", "expRel", "start", "$accept", "declars", "return", 
      "write", "block", "read", "ifelse", "if", "Anon@1", "Anon@2", "ifhead", 
      "Anon@3", "Anon@4", "Anon@5", "Anon@6", };

  static Parser() {
    states[0] = new State(new int[]{11,3},new int[]{-13,1});
    states[1] = new State(new int[]{3,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{24,4});
    states[4] = new State(new int[]{19,9,20,12,21,15,18,21,39,26,27,41,6,54,37,56,38,58,40,60,41,61,22,62,23,63,16,89,24,97,14,107,12,113,17,116,2,119,25,-5},new int[]{-15,5,-6,7,-1,18,-2,121,-17,20,-10,86,-11,29,-12,45,-3,76,-4,67,-9,66,-5,65,-8,88,-18,96,-7,100,-20,101,-24,102,-21,111,-16,112,-19,115});
    states[5] = new State(new int[]{25,6});
    states[6] = new State(-2);
    states[7] = new State(new int[]{19,9,20,12,21,15,18,21,39,26,27,41,6,54,37,56,38,58,40,60,41,61,22,62,23,63,16,89,24,97,14,107,12,113,17,116,2,119,25,-5},new int[]{-15,8,-6,7,-1,18,-2,121,-17,20,-10,86,-11,29,-12,45,-3,76,-4,67,-9,66,-5,65,-8,88,-18,96,-7,100,-20,101,-24,102,-21,111,-16,112,-19,115});
    states[8] = new State(-3);
    states[9] = new State(new int[]{39,10});
    states[10] = new State(new int[]{26,11});
    states[11] = new State(-28);
    states[12] = new State(new int[]{39,13});
    states[13] = new State(new int[]{26,14});
    states[14] = new State(-29);
    states[15] = new State(new int[]{39,16});
    states[16] = new State(new int[]{26,17});
    states[17] = new State(-30);
    states[18] = new State(new int[]{18,21,39,26,27,41,6,54,37,56,38,58,40,60,41,61,22,62,23,63,16,89,24,97,14,107,12,113,17,116,2,119,25,-4},new int[]{-2,19,-17,20,-10,86,-11,29,-12,45,-3,76,-4,67,-9,66,-5,65,-8,88,-18,96,-7,100,-20,101,-24,102,-21,111,-16,112,-19,115});
    states[19] = new State(-6);
    states[20] = new State(-9);
    states[21] = new State(new int[]{42,24,39,26,27,41,6,54,37,56,38,58,40,60,41,61,22,62,23,63},new int[]{-10,22,-11,29,-12,45,-3,76,-4,67,-9,66,-5,65});
    states[22] = new State(new int[]{26,23});
    states[23] = new State(-31);
    states[24] = new State(new int[]{26,25});
    states[25] = new State(-32);
    states[26] = new State(new int[]{4,27,9,-68,10,-68,7,-68,8,-68,5,-68,6,-68,29,-68,30,-68,31,-68,32,-68,33,-68,34,-68,35,-68,36,-68,26,-68,28,-68});
    states[27] = new State(new int[]{39,26,27,41,6,54,37,56,38,58,40,60,41,61,22,62,23,63},new int[]{-10,28,-11,29,-12,45,-3,76,-4,67,-9,66,-5,65});
    states[28] = new State(-34);
    states[29] = new State(new int[]{26,-35,28,-35,35,-36,36,-38},new int[]{-26,30,-27,83});
    states[30] = new State(new int[]{35,31});
    states[31] = new State(new int[]{27,41,6,54,37,56,38,58,40,60,41,61,22,62,23,63,39,64},new int[]{-12,32,-3,76,-4,67,-9,66,-5,65});
    states[32] = new State(new int[]{29,33,30,46,31,68,32,70,33,72,34,74,35,-37,36,-37,26,-37,28,-37});
    states[33] = new State(new int[]{27,41,6,54,37,56,38,58,40,60,41,61,22,62,23,63,39,64},new int[]{-3,34,-4,67,-9,66,-5,65});
    states[34] = new State(new int[]{5,35,6,48,29,-41,30,-41,31,-41,32,-41,33,-41,34,-41,35,-41,36,-41,26,-41,28,-41});
    states[35] = new State(new int[]{27,41,6,54,37,56,38,58,40,60,41,61,22,62,23,63,39,64},new int[]{-4,36,-9,66,-5,65});
    states[36] = new State(new int[]{7,37,8,50,5,-48,6,-48,29,-48,30,-48,31,-48,32,-48,33,-48,34,-48,35,-48,36,-48,26,-48,28,-48});
    states[37] = new State(new int[]{27,41,6,54,37,56,38,58,40,60,41,61,22,62,23,63,39,64},new int[]{-9,38,-5,65});
    states[38] = new State(new int[]{9,39,10,52,7,-51,8,-51,5,-51,6,-51,29,-51,30,-51,31,-51,32,-51,33,-51,34,-51,35,-51,36,-51,26,-51,28,-51});
    states[39] = new State(new int[]{27,41,6,54,37,56,38,58,40,60,41,61,22,62,23,63,39,64},new int[]{-5,40});
    states[40] = new State(-54);
    states[41] = new State(new int[]{19,77,20,80,39,-57,27,-57,6,-57,37,-57,38,-57,40,-57,41,-57,22,-57,23,-57},new int[]{-28,42});
    states[42] = new State(new int[]{39,26,27,41,6,54,37,56,38,58,40,60,41,61,22,62,23,63},new int[]{-10,43,-11,29,-12,45,-3,76,-4,67,-9,66,-5,65});
    states[43] = new State(new int[]{28,44});
    states[44] = new State(-58);
    states[45] = new State(new int[]{29,33,30,46,31,68,32,70,33,72,34,74,35,-40,36,-40,26,-40,28,-40});
    states[46] = new State(new int[]{27,41,6,54,37,56,38,58,40,60,41,61,22,62,23,63,39,64},new int[]{-3,47,-4,67,-9,66,-5,65});
    states[47] = new State(new int[]{5,35,6,48,29,-42,30,-42,31,-42,32,-42,33,-42,34,-42,35,-42,36,-42,26,-42,28,-42});
    states[48] = new State(new int[]{27,41,6,54,37,56,38,58,40,60,41,61,22,62,23,63,39,64},new int[]{-4,49,-9,66,-5,65});
    states[49] = new State(new int[]{7,37,8,50,5,-49,6,-49,29,-49,30,-49,31,-49,32,-49,33,-49,34,-49,35,-49,36,-49,26,-49,28,-49});
    states[50] = new State(new int[]{27,41,6,54,37,56,38,58,40,60,41,61,22,62,23,63,39,64},new int[]{-9,51,-5,65});
    states[51] = new State(new int[]{9,39,10,52,7,-52,8,-52,5,-52,6,-52,29,-52,30,-52,31,-52,32,-52,33,-52,34,-52,35,-52,36,-52,26,-52,28,-52});
    states[52] = new State(new int[]{27,41,6,54,37,56,38,58,40,60,41,61,22,62,23,63,39,64},new int[]{-5,53});
    states[53] = new State(-55);
    states[54] = new State(new int[]{27,41,6,54,37,56,38,58,40,60,41,61,22,62,23,63,39,64},new int[]{-5,55});
    states[55] = new State(-59);
    states[56] = new State(new int[]{27,41,6,54,37,56,38,58,40,60,41,61,22,62,23,63,39,64},new int[]{-5,57});
    states[57] = new State(-60);
    states[58] = new State(new int[]{27,41,6,54,37,56,38,58,40,60,41,61,22,62,23,63,39,64},new int[]{-5,59});
    states[59] = new State(-61);
    states[60] = new State(-64);
    states[61] = new State(-65);
    states[62] = new State(-66);
    states[63] = new State(-67);
    states[64] = new State(-68);
    states[65] = new State(-56);
    states[66] = new State(new int[]{9,39,10,52,7,-53,8,-53,5,-53,6,-53,29,-53,30,-53,31,-53,32,-53,33,-53,34,-53,35,-53,36,-53,26,-53,28,-53});
    states[67] = new State(new int[]{7,37,8,50,5,-50,6,-50,29,-50,30,-50,31,-50,32,-50,33,-50,34,-50,35,-50,36,-50,26,-50,28,-50});
    states[68] = new State(new int[]{27,41,6,54,37,56,38,58,40,60,41,61,22,62,23,63,39,64},new int[]{-3,69,-4,67,-9,66,-5,65});
    states[69] = new State(new int[]{5,35,6,48,29,-43,30,-43,31,-43,32,-43,33,-43,34,-43,35,-43,36,-43,26,-43,28,-43});
    states[70] = new State(new int[]{27,41,6,54,37,56,38,58,40,60,41,61,22,62,23,63,39,64},new int[]{-3,71,-4,67,-9,66,-5,65});
    states[71] = new State(new int[]{5,35,6,48,29,-44,30,-44,31,-44,32,-44,33,-44,34,-44,35,-44,36,-44,26,-44,28,-44});
    states[72] = new State(new int[]{27,41,6,54,37,56,38,58,40,60,41,61,22,62,23,63,39,64},new int[]{-3,73,-4,67,-9,66,-5,65});
    states[73] = new State(new int[]{5,35,6,48,29,-45,30,-45,31,-45,32,-45,33,-45,34,-45,35,-45,36,-45,26,-45,28,-45});
    states[74] = new State(new int[]{27,41,6,54,37,56,38,58,40,60,41,61,22,62,23,63,39,64},new int[]{-3,75,-4,67,-9,66,-5,65});
    states[75] = new State(new int[]{5,35,6,48,29,-46,30,-46,31,-46,32,-46,33,-46,34,-46,35,-46,36,-46,26,-46,28,-46});
    states[76] = new State(new int[]{5,35,6,48,29,-47,30,-47,31,-47,32,-47,33,-47,34,-47,35,-47,36,-47,26,-47,28,-47});
    states[77] = new State(new int[]{28,78});
    states[78] = new State(new int[]{27,41,6,54,37,56,38,58,40,60,41,61,22,62,23,63,39,64},new int[]{-5,79});
    states[79] = new State(-62);
    states[80] = new State(new int[]{28,81});
    states[81] = new State(new int[]{27,41,6,54,37,56,38,58,40,60,41,61,22,62,23,63,39,64},new int[]{-5,82});
    states[82] = new State(-63);
    states[83] = new State(new int[]{36,84});
    states[84] = new State(new int[]{27,41,6,54,37,56,38,58,40,60,41,61,22,62,23,63,39,64},new int[]{-12,85,-3,76,-4,67,-9,66,-5,65});
    states[85] = new State(new int[]{29,33,30,46,31,68,32,70,33,72,34,74,35,-39,36,-39,26,-39,28,-39});
    states[86] = new State(new int[]{26,87});
    states[87] = new State(-10);
    states[88] = new State(-11);
    states[89] = new State(-21,new int[]{-22,90});
    states[90] = new State(new int[]{27,91});
    states[91] = new State(new int[]{39,26,27,41,6,54,37,56,38,58,40,60,41,61,22,62,23,63},new int[]{-10,92,-11,29,-12,45,-3,76,-4,67,-9,66,-5,65});
    states[92] = new State(new int[]{28,93});
    states[93] = new State(-22,new int[]{-23,94});
    states[94] = new State(new int[]{18,21,39,26,27,41,6,54,37,56,38,58,40,60,41,61,22,62,23,63,16,89,24,97,14,107,12,113,17,116,2,119},new int[]{-2,95,-17,20,-10,86,-11,29,-12,45,-3,76,-4,67,-9,66,-5,65,-8,88,-18,96,-7,100,-20,101,-24,102,-21,111,-16,112,-19,115});
    states[95] = new State(-23);
    states[96] = new State(-12);
    states[97] = new State(new int[]{25,120,18,21,39,26,27,41,6,54,37,56,38,58,40,60,41,61,22,62,23,63,16,89,24,97,14,107,12,113,17,116,2,119},new int[]{-1,98,-2,121,-17,20,-10,86,-11,29,-12,45,-3,76,-4,67,-9,66,-5,65,-8,88,-18,96,-7,100,-20,101,-24,102,-21,111,-16,112,-19,115});
    states[98] = new State(new int[]{25,99,18,21,39,26,27,41,6,54,37,56,38,58,40,60,41,61,22,62,23,63,16,89,24,97,14,107,12,113,17,116,2,119},new int[]{-2,19,-17,20,-10,86,-11,29,-12,45,-3,76,-4,67,-9,66,-5,65,-8,88,-18,96,-7,100,-20,101,-24,102,-21,111,-16,112,-19,115});
    states[99] = new State(-17);
    states[100] = new State(-13);
    states[101] = new State(-19);
    states[102] = new State(new int[]{18,21,39,26,27,41,6,54,37,56,38,58,40,60,41,61,22,62,23,63,16,89,24,97,14,107,12,113,17,116,2,119},new int[]{-2,103,-17,20,-10,86,-11,29,-12,45,-3,76,-4,67,-9,66,-5,65,-8,88,-18,96,-7,100,-20,101,-24,102,-21,111,-16,112,-19,115});
    states[103] = new State(new int[]{15,104,18,-25,39,-25,27,-25,6,-25,37,-25,38,-25,40,-25,41,-25,22,-25,23,-25,16,-25,24,-25,14,-25,12,-25,17,-25,2,-25,25,-25});
    states[104] = new State(-26,new int[]{-25,105});
    states[105] = new State(new int[]{18,21,39,26,27,41,6,54,37,56,38,58,40,60,41,61,22,62,23,63,16,89,24,97,14,107,12,113,17,116,2,119},new int[]{-2,106,-17,20,-10,86,-11,29,-12,45,-3,76,-4,67,-9,66,-5,65,-8,88,-18,96,-7,100,-20,101,-24,102,-21,111,-16,112,-19,115});
    states[106] = new State(-27);
    states[107] = new State(new int[]{27,108});
    states[108] = new State(new int[]{39,26,27,41,6,54,37,56,38,58,40,60,41,61,22,62,23,63},new int[]{-10,109,-11,29,-12,45,-3,76,-4,67,-9,66,-5,65});
    states[109] = new State(new int[]{28,110});
    states[110] = new State(-24);
    states[111] = new State(-20);
    states[112] = new State(-14);
    states[113] = new State(new int[]{26,114});
    states[114] = new State(-8);
    states[115] = new State(-15);
    states[116] = new State(new int[]{39,117});
    states[117] = new State(new int[]{26,118});
    states[118] = new State(-33);
    states[119] = new State(-16);
    states[120] = new State(-18);
    states[121] = new State(-7);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-14, new int[]{-13,3});
    rules[2] = new Rule(-13, new int[]{11,24,-15,25});
    rules[3] = new Rule(-15, new int[]{-6,-15});
    rules[4] = new Rule(-15, new int[]{-1});
    rules[5] = new Rule(-15, new int[]{});
    rules[6] = new Rule(-1, new int[]{-1,-2});
    rules[7] = new Rule(-1, new int[]{-2});
    rules[8] = new Rule(-16, new int[]{12,26});
    rules[9] = new Rule(-2, new int[]{-17});
    rules[10] = new Rule(-2, new int[]{-10,26});
    rules[11] = new Rule(-2, new int[]{-8});
    rules[12] = new Rule(-2, new int[]{-18});
    rules[13] = new Rule(-2, new int[]{-7});
    rules[14] = new Rule(-2, new int[]{-16});
    rules[15] = new Rule(-2, new int[]{-19});
    rules[16] = new Rule(-2, new int[]{2});
    rules[17] = new Rule(-18, new int[]{24,-1,25});
    rules[18] = new Rule(-18, new int[]{24,25});
    rules[19] = new Rule(-7, new int[]{-20});
    rules[20] = new Rule(-7, new int[]{-21});
    rules[21] = new Rule(-22, new int[]{});
    rules[22] = new Rule(-23, new int[]{});
    rules[23] = new Rule(-8, new int[]{16,-22,27,-10,28,-23,-2});
    rules[24] = new Rule(-24, new int[]{14,27,-10,28});
    rules[25] = new Rule(-21, new int[]{-24,-2});
    rules[26] = new Rule(-25, new int[]{});
    rules[27] = new Rule(-20, new int[]{-24,-2,15,-25,-2});
    rules[28] = new Rule(-6, new int[]{19,39,26});
    rules[29] = new Rule(-6, new int[]{20,39,26});
    rules[30] = new Rule(-6, new int[]{21,39,26});
    rules[31] = new Rule(-17, new int[]{18,-10,26});
    rules[32] = new Rule(-17, new int[]{18,42,26});
    rules[33] = new Rule(-19, new int[]{17,39,26});
    rules[34] = new Rule(-10, new int[]{39,4,-10});
    rules[35] = new Rule(-10, new int[]{-11});
    rules[36] = new Rule(-26, new int[]{});
    rules[37] = new Rule(-11, new int[]{-11,-26,35,-12});
    rules[38] = new Rule(-27, new int[]{});
    rules[39] = new Rule(-11, new int[]{-11,-27,36,-12});
    rules[40] = new Rule(-11, new int[]{-12});
    rules[41] = new Rule(-12, new int[]{-12,29,-3});
    rules[42] = new Rule(-12, new int[]{-12,30,-3});
    rules[43] = new Rule(-12, new int[]{-12,31,-3});
    rules[44] = new Rule(-12, new int[]{-12,32,-3});
    rules[45] = new Rule(-12, new int[]{-12,33,-3});
    rules[46] = new Rule(-12, new int[]{-12,34,-3});
    rules[47] = new Rule(-12, new int[]{-3});
    rules[48] = new Rule(-3, new int[]{-3,5,-4});
    rules[49] = new Rule(-3, new int[]{-3,6,-4});
    rules[50] = new Rule(-3, new int[]{-4});
    rules[51] = new Rule(-4, new int[]{-4,7,-9});
    rules[52] = new Rule(-4, new int[]{-4,8,-9});
    rules[53] = new Rule(-4, new int[]{-9});
    rules[54] = new Rule(-9, new int[]{-9,9,-5});
    rules[55] = new Rule(-9, new int[]{-9,10,-5});
    rules[56] = new Rule(-9, new int[]{-5});
    rules[57] = new Rule(-28, new int[]{});
    rules[58] = new Rule(-5, new int[]{27,-28,-10,28});
    rules[59] = new Rule(-5, new int[]{6,-5});
    rules[60] = new Rule(-5, new int[]{37,-5});
    rules[61] = new Rule(-5, new int[]{38,-5});
    rules[62] = new Rule(-5, new int[]{27,19,28,-5});
    rules[63] = new Rule(-5, new int[]{27,20,28,-5});
    rules[64] = new Rule(-5, new int[]{40});
    rules[65] = new Rule(-5, new int[]{41});
    rules[66] = new Rule(-5, new int[]{22});
    rules[67] = new Rule(-5, new int[]{23});
    rules[68] = new Rule(-5, new int[]{39});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 8: // return -> Return, Semicolon
#line 27 "../../kompilator.y"
          {
            Compiler.EmitCode("ldc.i4 0");
            Compiler.EmitCode("leave EndMain");
          }
#line default
        break;
      case 10: // stat -> assign, Semicolon
#line 33 "../../kompilator.y"
            {
                Compiler.EmitCode("{0}:", Compiler.GetParTemp()); // sprawdzic kolejnosc tych 2
                Compiler.EmitCode("pop");
            }
#line default
        break;
      case 16: // stat -> error
#line 39 "../../kompilator.y"
          {
               Console.WriteLine("  line {0,3}:  syntax error",LocationStack[LocationStack.Depth-1].StartLine);
               ++Compiler.errors;
               yyerrok();
               YYAccept();
          }
#line default
        break;
      case 21: // Anon@1 -> /* empty */
#line 52 "../../kompilator.y"
            { 
                temp = Compiler.AddWhileTemp();
                Compiler.EmitCode("{0}:", temp);
            }
#line default
        break;
      case 22: // Anon@2 -> /* empty */
#line 57 "../../kompilator.y"
            { 
                if (ValueStack[ValueStack.Depth-2].type != 'b')
                {
                    Console.WriteLine("line {0,3}:  statement must be bool type", LocationStack[LocationStack.Depth-5].StartLine);
                    Compiler.errors++;
                }
                Compiler.EmitCode("{0}:", Compiler.GetParTemp());
                temp = Compiler.AddIfTemp();
                Compiler.EmitCode("brfalse {0}", temp); 
            }
#line default
        break;
      case 23: // while -> While, Anon@1, OpenPar, assign, ClosePar, Anon@2, stat
#line 68 "../../kompilator.y"
            { 
                temp = Compiler.GetWhileTemp();
                Compiler.EmitCode("br {0}", temp);
                temp = Compiler.GetIfTemp();
                Compiler.EmitCode("{0}:", temp);
            }
#line default
        break;
      case 24: // ifhead -> If, OpenPar, assign, ClosePar
#line 76 "../../kompilator.y"
            {
                if (ValueStack[ValueStack.Depth-2].type != 'b')
                {
                    Console.WriteLine("line {0,3}:  statement must be bool type", LocationStack[LocationStack.Depth-4].StartLine);
                    Compiler.errors++;
                }
                Compiler.EmitCode("{0}:", Compiler.GetParTemp());
                temp = Compiler.AddIfTemp();
                Compiler.EmitCode("brfalse {0}", temp);
            }
#line default
        break;
      case 25: // if -> ifhead, stat
#line 89 "../../kompilator.y"
            { 
                temp = Compiler.GetIfTemp();
                Compiler.EmitCode("{0}:", temp);
            }
#line default
        break;
      case 26: // Anon@3 -> /* empty */
#line 97 "../../kompilator.y"
            {
                temp = Compiler.GetIfTemp();
                temp2 = Compiler.AddElseTemp();
                Compiler.EmitCode("br {0}", temp2);
                Compiler.EmitCode("{0}:", temp);
            }
#line default
        break;
      case 27: // ifelse -> ifhead, stat, Else, Anon@3, stat
#line 104 "../../kompilator.y"
            {
                temp2 = Compiler.GetElseTemp();
                Compiler.EmitCode("{0}:", temp2);
            }
#line default
        break;
      case 28: // declare -> Int, Ident, Semicolon
#line 110 "../../kompilator.y"
            {
                if (System.Linq.Enumerable.All(Compiler.symbolTable.Keys, ident => ident != "_" + ValueStack[ValueStack.Depth-2].val))
                {
                    
                    Compiler.EmitCode(".locals init ( int32 _{0} )", ValueStack[ValueStack.Depth-2].val);
                    Compiler.symbolTable.Add("_" + ValueStack[ValueStack.Depth-2].val, "int");
                }
                else
                {
                    Console.WriteLine("line {0,3}:  variable already declared!", LocationStack[LocationStack.Depth-3].StartLine);
                    Compiler.errors++;
                }

            }
#line default
        break;
      case 29: // declare -> Double, Ident, Semicolon
#line 125 "../../kompilator.y"
            {
                if (System.Linq.Enumerable.All(Compiler.symbolTable.Keys, ident => ident != "_" + ValueStack[ValueStack.Depth-2].val))
                {
                    Compiler.EmitCode(".locals init ( float64 _{0} )", ValueStack[ValueStack.Depth-2].val);
                    Compiler.symbolTable.Add("_" + ValueStack[ValueStack.Depth-2].val, "double");
                }
                else
                {
                    Console.WriteLine("line {0,3}:  variable already declared!", LocationStack[LocationStack.Depth-3].StartLine);
                    Compiler.errors++;
                }
            }
#line default
        break;
      case 30: // declare -> Bool, Ident, Semicolon
#line 138 "../../kompilator.y"
            {
                if (System.Linq.Enumerable.All(Compiler.symbolTable.Keys, ident => ident != "_" + ValueStack[ValueStack.Depth-2].val))
                {
                    Compiler.EmitCode(".locals init ( int32 _{0} )", ValueStack[ValueStack.Depth-2].val);
                    Compiler.symbolTable.Add("_" + ValueStack[ValueStack.Depth-2].val, "bool");
                }
                else
                {
                    Console.WriteLine("line {0,3}:  variable already declared!", LocationStack[LocationStack.Depth-3].StartLine);
                    Compiler.errors++;
                }
            }
#line default
        break;
      case 31: // write -> Write, assign, Semicolon
#line 152 "../../kompilator.y"
            {
                Compiler.EmitCode("{0}:", Compiler.GetParTemp());
                if (ValueStack[ValueStack.Depth-2].type == 'd')
                {
                    Compiler.EmitCode("stloc __temp");
                    Compiler.EmitCode("call class [mscorlib]System.Globalization.CultureInfo [mscorlib]System.Globalization.CultureInfo::get_InvariantCulture()");
                    Compiler.EmitCode("ldstr \"{0:0.000000}\"");
                    Compiler.EmitCode("ldloc __temp");
                    Compiler.EmitCode("box [mscorlib]System.Double");
                    Compiler.EmitCode("call string [mscorlib]System.String::Format(class [mscorlib]System.IFormatProvider, string, object)");
                    Compiler.EmitCode("call void [mscorlib]System.Console::Write(string)");
                }
                else if (ValueStack[ValueStack.Depth-2].type == 'b')
                {
                    Compiler.EmitCode("call void [mscorlib]System.Console::Write(bool)");
                }
                else
                {
                    Compiler.EmitCode("box [mscorlib]System.Int32");
                    Compiler.EmitCode("call void [mscorlib]System.Console::Write(object)");
                }
            }
#line default
        break;
      case 32: // write -> Write, String, Semicolon
#line 175 "../../kompilator.y"
            {
                Compiler.EmitCode("ldstr {0}", ValueStack[ValueStack.Depth-2].val);
                Compiler.EmitCode("call void [mscorlib]System.Console::Write(string)");
            }
#line default
        break;
      case 33: // read -> Read, Ident, Semicolon
#line 181 "../../kompilator.y"
            {
               if (!Compiler.symbolTable.ContainsKey("_" + ValueStack[ValueStack.Depth-2].val)) 
               {
                    Console.WriteLine("line {0,3}: error - use of undeclared variable", LocationStack[LocationStack.Depth-3].StartLine);
                    Compiler.errors++;
               }
               else
               {
                    Compiler.EmitCode("call string [mscorlib]System.Console::ReadLine()");
                    if (Compiler.symbolTable["_" + ValueStack[ValueStack.Depth-2].val] == "bool")
                    {
                        Compiler.EmitCode("call bool [mscorlib]System.Boolean::Parse(string)");
                    }
                    else if (Compiler.symbolTable["_" + ValueStack[ValueStack.Depth-2].val] == "int")
                    {
                        Compiler.EmitCode("call int32 [mscorlib]System.Int32::Parse(string)");
                    }
                    else
                    {
                       Compiler.EmitCode("call float64 [mscorlib]System.Double::Parse(string)");
                    }
                    Compiler.EmitCode("stloc {0}", "_" + ValueStack[ValueStack.Depth-2].val);
               }
          }
#line default
        break;
      case 34: // assign -> Ident, Assign, assign
#line 207 "../../kompilator.y"
          {       
               if (!Compiler.symbolTable.ContainsKey("_" + ValueStack[ValueStack.Depth-3].val)) 
               {
                    Console.WriteLine("line {0,3}: error - use of undeclared variable", LocationStack[LocationStack.Depth-3].StartLine);
                    Compiler.errors++;
               }
               else
               {
                    if (Compiler.symbolTable["_" + ValueStack[ValueStack.Depth-3].val]=="int" && ValueStack[ValueStack.Depth-1].type != 'i')
                    {
                        Console.WriteLine("line {0,3}:  semantic error - cannot convert to int (use convert operator)",LocationStack[LocationStack.Depth-3].StartLine);
                        ++Compiler.errors;
                    } 
                    else if (Compiler.symbolTable["_" + ValueStack[ValueStack.Depth-3].val]=="double" && ValueStack[ValueStack.Depth-1].type != 'd' && ValueStack[ValueStack.Depth-1].type != 'i')
                    {
                        Console.WriteLine("line {0,3}:  semantic error - cannot convert to double (use convert operator)",LocationStack[LocationStack.Depth-3].StartLine);
                        ++Compiler.errors;
                    }
                    else if (Compiler.symbolTable["_" + ValueStack[ValueStack.Depth-3].val]=="bool" && ValueStack[ValueStack.Depth-1].type != 'b')
                    {
                        Console.WriteLine("line {0,3}:  semantic error - cannot convert to bool (use convert operator)",LocationStack[LocationStack.Depth-3].StartLine);
                        ++Compiler.errors;
                    }
                    else
                    {
                        CurrentSemanticValue.type = ValueStack[ValueStack.Depth-1].type;
                        if (Compiler.symbolTable["_" + ValueStack[ValueStack.Depth-3].val]=="double" && ValueStack[ValueStack.Depth-1].type =='i')
                        {
                            Compiler.EmitCode("conv.r8");
                            CurrentSemanticValue.type = 'd';
                        }
                        Compiler.EmitCode("dup");
                        Compiler.EmitCode("stloc {0}", "_" + ValueStack[ValueStack.Depth-3].val);
                    }
               }
            }
#line default
        break;
      case 35: // assign -> expLog
#line 244 "../../kompilator.y"
            { 
                CurrentSemanticValue.type = ValueStack[ValueStack.Depth-1].type;
            }
#line default
        break;
      case 36: // Anon@4 -> /* empty */
#line 249 "../../kompilator.y"
            {                
                Compiler.AddParTemp(); 
                Compiler.EmitCode("brtrue licz{0}", ++pom);
                Compiler.EmitCode("ldc.i4 0");
                Compiler.EmitCode("br {0}", Compiler.CheckParTemp());
                Compiler.EmitCode("licz{0}:", pom);
                Compiler.EmitCode("ldc.i4 1");  
            }
#line default
        break;
      case 37: // expLog -> expLog, Anon@4, And, expRel
#line 258 "../../kompilator.y"
            {
                if (ValueStack[ValueStack.Depth-4].type != 'b' || ValueStack[ValueStack.Depth-1].type != 'b')
                {
                    Console.WriteLine("line {0,3}:  semantic error - && operator can be used to bool arguments",LocationStack[LocationStack.Depth-4].StartLine);
                    ++Compiler.errors;
                }
                else
                {
                    Compiler.EmitCode("and");
                    Compiler.EmitCode("{0}:", Compiler.GetParTemp());
                    CurrentSemanticValue.type = 'b';
                }
            }
#line default
        break;
      case 38: // Anon@5 -> /* empty */
#line 272 "../../kompilator.y"
            {
                Compiler.AddParTemp(); 
                Compiler.EmitCode("brfalse licz{0}", ++pom);
                Compiler.EmitCode("ldc.i4 1");
                Compiler.EmitCode("br {0}", Compiler.CheckParTemp());
                Compiler.EmitCode("licz{0}:", pom);
                Compiler.EmitCode("ldc.i4 0");
            }
#line default
        break;
      case 39: // expLog -> expLog, Anon@5, Or, expRel
#line 281 "../../kompilator.y"
            {
                if (ValueStack[ValueStack.Depth-4].type != 'b' || ValueStack[ValueStack.Depth-1].type != 'b')
                {
                    Console.WriteLine("line {0,3}:  semantic error - || operator can be used to bool arguments",LocationStack[LocationStack.Depth-4].StartLine);
                    ++Compiler.errors;
                }
                else
                {
                    Compiler.EmitCode("or");
                    Compiler.EmitCode("{0}:", Compiler.GetParTemp());
                    CurrentSemanticValue.type = 'b';
                }
            }
#line default
        break;
      case 40: // expLog -> expRel
#line 294 "../../kompilator.y"
                     { CurrentSemanticValue.type = ValueStack[ValueStack.Depth-1].type; }
#line default
        break;
      case 41: // expRel -> expRel, Equal, exp
#line 297 "../../kompilator.y"
            {
                if ((ValueStack[ValueStack.Depth-3].type == 'b' && ValueStack[ValueStack.Depth-1].type != 'b') || (ValueStack[ValueStack.Depth-3].type != 'b' && ValueStack[ValueStack.Depth-1].type == 'b'))
                {
                    Console.WriteLine("line {0,3}:  semantic error - == operator cannot be used to these arguments",LocationStack[LocationStack.Depth-3].StartLine);
                    ++Compiler.errors;
                }
                else
                {
                    if (ValueStack[ValueStack.Depth-3].type != 'b' || ValueStack[ValueStack.Depth-1].type != 'b')
                        CheckTypes(ValueStack[ValueStack.Depth-3].type, ValueStack[ValueStack.Depth-1].type);
                    Compiler.EmitCode("ceq");
                    CurrentSemanticValue.type = 'b';
                }
            }
#line default
        break;
      case 42: // expRel -> expRel, NotEqual, exp
#line 312 "../../kompilator.y"
            {
                if ((ValueStack[ValueStack.Depth-3].type == 'b' && ValueStack[ValueStack.Depth-1].type != 'b') || (ValueStack[ValueStack.Depth-3].type != 'b' && ValueStack[ValueStack.Depth-1].type == 'b'))
                {
                    Console.WriteLine("line {0,3}:  semantic error - != operator cannot be used to these arguments",LocationStack[LocationStack.Depth-3].StartLine);
                    ++Compiler.errors;
                }
                else
                {
                    if (ValueStack[ValueStack.Depth-3].type != 'b' || ValueStack[ValueStack.Depth-1].type != 'b')
                        CheckTypes(ValueStack[ValueStack.Depth-3].type, ValueStack[ValueStack.Depth-1].type);
                    Compiler.EmitCode("ceq");
                    Compiler.EmitCode("ldc.i4 1");
                    Compiler.EmitCode("xor");
                    CurrentSemanticValue.type = 'b';
                }
            }
#line default
        break;
      case 43: // expRel -> expRel, Greater, exp
#line 329 "../../kompilator.y"
            {
                if (ValueStack[ValueStack.Depth-3].type == 'b' || ValueStack[ValueStack.Depth-1].type == 'b')
                {
                    Console.WriteLine("line {0,3}:  semantic error - > operator cannot be used to bool arguments",LocationStack[LocationStack.Depth-3].StartLine);
                    ++Compiler.errors;
                }
                else
                {
                    CheckTypes(ValueStack[ValueStack.Depth-3].type, ValueStack[ValueStack.Depth-1].type);
                    Compiler.EmitCode("cgt");
                    CurrentSemanticValue.type = 'b';
                }
            }
#line default
        break;
      case 44: // expRel -> expRel, GreaterEqual, exp
#line 343 "../../kompilator.y"
            {
                if (ValueStack[ValueStack.Depth-3].type == 'b' || ValueStack[ValueStack.Depth-1].type == 'b')
                {
                    Console.WriteLine("line {0,3}:  semantic error - >= operator cannot be used to bool arguments",LocationStack[LocationStack.Depth-3].StartLine);
                    ++Compiler.errors;
                }
                else
                {
                    //if ($3 == 'd')
                    //    Compiler.EmitCode("ldc.r8 1");
                    //else
                    //    Compiler.EmitCode("ldc.i4 1");
                    //Compiler.EmitCode("sub");
                    CheckTypes(ValueStack[ValueStack.Depth-3].type, ValueStack[ValueStack.Depth-1].type);

                    Compiler.EmitCode("clt");
                    Compiler.EmitCode("ldc.i4 0");
                    Compiler.EmitCode("ceq");
                    CurrentSemanticValue.type = 'b';
                }
            }
#line default
        break;
      case 45: // expRel -> expRel, Less, exp
#line 365 "../../kompilator.y"
            {
                if (ValueStack[ValueStack.Depth-3].type == 'b' || ValueStack[ValueStack.Depth-1].type == 'b')
                {
                    Console.WriteLine("line {0,3}:  semantic error - < operator cannot be used to bool arguments",LocationStack[LocationStack.Depth-3].StartLine);
                    ++Compiler.errors;
                }
                else
                {
                    CheckTypes(ValueStack[ValueStack.Depth-3].type, ValueStack[ValueStack.Depth-1].type);
                    Compiler.EmitCode("clt");
                    CurrentSemanticValue.type = 'b';
                }
            }
#line default
        break;
      case 46: // expRel -> expRel, LessEqual, exp
#line 379 "../../kompilator.y"
            {
                if (ValueStack[ValueStack.Depth-3].type == 'b' || ValueStack[ValueStack.Depth-1].type == 'b')
                {
                    Console.WriteLine("line {0,3}:  semantic error - <= operator cannot be used to bool arguments",LocationStack[LocationStack.Depth-3].StartLine);
                    ++Compiler.errors;
                }
                else
                {
                    // if ($3 == 'd')
                     //    Compiler.EmitCode("ldc.r8 1");
                     //else
                     //    Compiler.EmitCode("ldc.i4 1");
                    //Compiler.EmitCode("add");
                    CheckTypes(ValueStack[ValueStack.Depth-3].type, ValueStack[ValueStack.Depth-1].type);
                    Compiler.EmitCode("cgt");
                    Compiler.EmitCode("ldc.i4 0");
                    Compiler.EmitCode("ceq");
                    CurrentSemanticValue.type = 'b';
                }
            }
#line default
        break;
      case 47: // expRel -> exp
#line 399 "../../kompilator.y"
                  { CurrentSemanticValue.type = ValueStack[ValueStack.Depth-1].type; }
#line default
        break;
      case 48: // exp -> exp, Plus, term
#line 402 "../../kompilator.y"
          { 
            if (ValueStack[ValueStack.Depth-3].type == 'b' || ValueStack[ValueStack.Depth-1].type == 'b')
            {
                Console.WriteLine("line {0,3}:  arguments cannot be bool to use + operator",LocationStack[LocationStack.Depth-3].StartLine);
                ++Compiler.errors;
            }
            else
            {
                CurrentSemanticValue.type = BinaryOpGenCode(Tokens.Plus, ValueStack[ValueStack.Depth-3].type, ValueStack[ValueStack.Depth-1].type, LocationStack[LocationStack.Depth-3].StartLine); 
            }
          }
#line default
        break;
      case 49: // exp -> exp, Minus, term
#line 414 "../../kompilator.y"
          { 
            if (ValueStack[ValueStack.Depth-3].type == 'b' || ValueStack[ValueStack.Depth-1].type == 'b')
            {
                Console.WriteLine("line {0,3}:  arguments cannot be bool to use - operator",LocationStack[LocationStack.Depth-3].StartLine);
                ++Compiler.errors;
            }
            else
            {
                CurrentSemanticValue.type = BinaryOpGenCode(Tokens.Minus, ValueStack[ValueStack.Depth-3].type, ValueStack[ValueStack.Depth-1].type, LocationStack[LocationStack.Depth-3].StartLine); 
            }
          }
#line default
        break;
      case 50: // exp -> term
#line 426 "../../kompilator.y"
               { CurrentSemanticValue.type = ValueStack[ValueStack.Depth-1].type; }
#line default
        break;
      case 51: // term -> term, Multiplies, log
#line 430 "../../kompilator.y"
          { 
            if (ValueStack[ValueStack.Depth-3].type == 'b' || ValueStack[ValueStack.Depth-1].type == 'b')
            {
                Console.WriteLine("line {0,3}:  arguments cannot be bool to use * operator",LocationStack[LocationStack.Depth-3].StartLine);
                ++Compiler.errors;
            }
            else
            {
                CurrentSemanticValue.type = BinaryOpGenCode(Tokens.Multiplies, ValueStack[ValueStack.Depth-3].type, ValueStack[ValueStack.Depth-1].type, LocationStack[LocationStack.Depth-3].StartLine); 
            }
          }
#line default
        break;
      case 52: // term -> term, Divides, log
#line 442 "../../kompilator.y"
          { 
            if (ValueStack[ValueStack.Depth-3].type == 'b' || ValueStack[ValueStack.Depth-1].type == 'b')
            {
                Console.WriteLine("line {0,3}:  arguments cannot be bool to use / operator",LocationStack[LocationStack.Depth-3].StartLine);
                ++Compiler.errors;
            }
            else
            {
                CurrentSemanticValue.type = BinaryOpGenCode(Tokens.Divides, ValueStack[ValueStack.Depth-3].type, ValueStack[ValueStack.Depth-1].type, LocationStack[LocationStack.Depth-3].StartLine); 
            }
          }
#line default
        break;
      case 53: // term -> log
#line 454 "../../kompilator.y"
               { CurrentSemanticValue.type = ValueStack[ValueStack.Depth-1].type; }
#line default
        break;
      case 54: // log -> log, SumLog, factor
#line 457 "../../kompilator.y"
          {
            if (ValueStack[ValueStack.Depth-3].type != 'i' || ValueStack[ValueStack.Depth-1].type != 'i')
            {
                Console.WriteLine("line {0,3}:  arguments must be int to use | operator",LocationStack[LocationStack.Depth-3].StartLine);
                ++Compiler.errors;
            }
            else
            {
                CurrentSemanticValue.type = BinaryOpGenCode(Tokens.SumLog, ValueStack[ValueStack.Depth-3].type, ValueStack[ValueStack.Depth-1].type, LocationStack[LocationStack.Depth-3].StartLine);
            }
          }
#line default
        break;
      case 55: // log -> log, IlLog, factor
#line 469 "../../kompilator.y"
          { 
            if (ValueStack[ValueStack.Depth-3].type != 'i' || ValueStack[ValueStack.Depth-1].type != 'i')
            {
                Console.WriteLine("line {0,3}:  arguments must be int to use & operator",LocationStack[LocationStack.Depth-3].StartLine);
                ++Compiler.errors;
            }
            else
            {
                CurrentSemanticValue.type = BinaryOpGenCode(Tokens.IlLog, ValueStack[ValueStack.Depth-3].type, ValueStack[ValueStack.Depth-1].type, LocationStack[LocationStack.Depth-3].StartLine);
            }
          }
#line default
        break;
      case 56: // log -> factor
#line 481 "../../kompilator.y"
               { CurrentSemanticValue.type = ValueStack[ValueStack.Depth-1].type; }
#line default
        break;
      case 57: // Anon@6 -> /* empty */
#line 484 "../../kompilator.y"
          {
            Compiler.AddParTemp();
          }
#line default
        break;
      case 58: // factor -> OpenPar, Anon@6, assign, ClosePar
#line 489 "../../kompilator.y"
          { 
            CurrentSemanticValue.type = ValueStack[ValueStack.Depth-2].type; 
            Compiler.EmitCode("{0}:", Compiler.GetParTemp());
          }
#line default
        break;
      case 59: // factor -> Minus, factor
#line 494 "../../kompilator.y"
          {
            if (ValueStack[ValueStack.Depth-1].type == 'b')
            {
                 Console.WriteLine("line {0,3}:  expression must be int or double to use - operator",LocationStack[LocationStack.Depth-2].StartLine);
                 Compiler.errors++;
            }
            else
            {
                CurrentSemanticValue.type = ValueStack[ValueStack.Depth-1].type;
                Compiler.EmitCode("neg");
            }
          }
#line default
        break;
      case 60: // factor -> Exclamation, factor
#line 507 "../../kompilator.y"
          {
            if (ValueStack[ValueStack.Depth-1].type == 'b')
            {
                Compiler.EmitCode("ldc.i4 1");
                Compiler.EmitCode("xor");
                CurrentSemanticValue.type = 'b';
            }
            else
            {
                 Console.WriteLine("line {0,3}:  expression must be bool to use ! operator",LocationStack[LocationStack.Depth-2].StartLine);
                 Compiler.errors++;
            }
          }
#line default
        break;
      case 61: // factor -> Neg, factor
#line 521 "../../kompilator.y"
          {
            if (ValueStack[ValueStack.Depth-1].type != 'i')
            {
                 Console.WriteLine("line {0,3}:  expression must be int to use ~ operator",LocationStack[LocationStack.Depth-2].StartLine);
                 Compiler.errors++;
            }
            else
            {
                CurrentSemanticValue.type = ValueStack[ValueStack.Depth-1].type;
                Compiler.EmitCode("not");
            }
          }
#line default
        break;
      case 62: // factor -> OpenPar, Int, ClosePar, factor
#line 534 "../../kompilator.y"
          {
            if (ValueStack[ValueStack.Depth-1].type == 'd')
            {
                CurrentSemanticValue.type = 'i';
                Compiler.EmitCode("conv.i4");
            }
            else if (ValueStack[ValueStack.Depth-1].type == 'i')
            {
                CurrentSemanticValue.type = 'i';
            }
            else if (ValueStack[ValueStack.Depth-1].type == 'b')
            {
                CurrentSemanticValue.type = 'i';
            }
            else
            {
                 Console.WriteLine("line {0,3}:  type not recognized",LocationStack[LocationStack.Depth-4].StartLine);
                 Compiler.errors++;
            }
          }
#line default
        break;
      case 63: // factor -> OpenPar, Double, ClosePar, factor
#line 555 "../../kompilator.y"
          {
            if (ValueStack[ValueStack.Depth-1].type == 'd')
            {
                CurrentSemanticValue.type = 'd';
            }
            else if (ValueStack[ValueStack.Depth-1].type == 'i')
            {
                Compiler.EmitCode("conv.r8");
                CurrentSemanticValue.type = 'd';
            }
            else if (ValueStack[ValueStack.Depth-1].type == 'b')
            {
                Compiler.EmitCode("conv.r8");
                CurrentSemanticValue.type = 'd';
            }
            else
            {
                 Console.WriteLine("line {0,3}:  type not recognized",LocationStack[LocationStack.Depth-4].StartLine);
                 Compiler.errors++;
            }
          }
#line default
        break;
      case 64: // factor -> IntNumber
#line 577 "../../kompilator.y"
          {
               Compiler.EmitCode("ldc.i4 {0}",int.Parse(ValueStack[ValueStack.Depth-1].val));
               CurrentSemanticValue.type = 'i'; 
          }
#line default
        break;
      case 65: // factor -> RealNumber
#line 582 "../../kompilator.y"
          {
               double d = double.Parse(ValueStack[ValueStack.Depth-1].val,System.Globalization.CultureInfo.InvariantCulture);
               Compiler.EmitCode(string.Format(System.Globalization.CultureInfo.InvariantCulture,"ldc.r8 {0}",d));
               CurrentSemanticValue.type = 'd'; 
          }
#line default
        break;
      case 66: // factor -> True
#line 588 "../../kompilator.y"
          {
                Compiler.EmitCode("ldc.i4 1");
                CurrentSemanticValue.type = 'b';
          }
#line default
        break;
      case 67: // factor -> False
#line 593 "../../kompilator.y"
          {
                Compiler.EmitCode("ldc.i4 0");
                CurrentSemanticValue.type = 'b';
          }
#line default
        break;
      case 68: // factor -> Ident
#line 598 "../../kompilator.y"
          {
               if (!Compiler.symbolTable.ContainsKey("_" + ValueStack[ValueStack.Depth-1].val)) 
               {
                    Console.WriteLine("line {0,3}: error - use of undeclared variable", LocationStack[LocationStack.Depth-1].StartLine);
                    Compiler.errors++;
               }
               else
               {
                   Compiler.EmitCode("ldloc {0}", "_" + ValueStack[ValueStack.Depth-1].val);
                   switch(Compiler.symbolTable["_" + ValueStack[ValueStack.Depth-1].val])
                   {
                        case "int":
                            CurrentSemanticValue.type = 'i';
                            break;
                        case "double":
                            CurrentSemanticValue.type = 'd';
                            break;
                        case "bool":
                            CurrentSemanticValue.type = 'b';
                            break;
                        default:
                            Console.WriteLine("line {0,3}:  unrecognized type",LocationStack[LocationStack.Depth-1].StartLine);
                            Compiler.errors++;
                            break;
                   }
               }
          }
#line default
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 628 "../../kompilator.y"

string temp;
string temp2;
int pom = 0;

public Parser(Scanner scanner) : base(scanner) { }

private void CheckTypes(char type1, char type2)
{
    char type = (type1=='i' && type2=='i') ? 'i' : 'd' ;
    if (type1 != type)
    {
        Compiler.EmitCode("stloc __temp");
        Compiler.EmitCode("conv.r8");
        Compiler.EmitCode("ldloc __temp");
    }
    if (type2 != type)
        Compiler.EmitCode("conv.r8");
}

private char BinaryOpGenCode(Tokens t, char type1, char type2, int line)
{
    CheckTypes(type1, type2);
    switch (t)
    {
        case Tokens.Plus:
            Compiler.EmitCode("add");
            break;
        case Tokens.Minus:
            Compiler.EmitCode("sub");
            break;
        case Tokens.Multiplies:
            Compiler.EmitCode("mul");
            break;
        case Tokens.Divides:
            Compiler.EmitCode("div");
            break;
        case Tokens.SumLog:
            Compiler.EmitCode("or");
            break;
        case Tokens.IlLog:
            Compiler.EmitCode("and");
            break;
        default:
            Console.WriteLine($"line {0}:  token not recognized", line);
            ++Compiler.errors;
            break;
    }
    return (type1=='i' && type2=='i') ? 'i' : 'd';
}
#line default
}
}
