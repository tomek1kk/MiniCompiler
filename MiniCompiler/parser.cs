// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  DESKTOP-EC4UU67
// DateTime: 18.06.2020 00:51:56
// UserName: tomek
// Input file <kompilator.y - 18.06.2020 00:51:50>

// options: lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace GardensPoint
{
public enum Tokens {error=2,EOF=3,Assign=4,Plus=5,Minus=6,
    Multiplies=7,Divides=8,SumLog=9,IlLog=10,Program=11,Return=12,
    Eof=13,Error=14,If=15,Else=16,While=17,Read=18,
    Write=19,Int=20,Double=21,Bool=22,IntConv=23,DoubleConv=24,
    True=25,False=26,OpenBracket=27,CloseBracket=28,Semicolon=29,OpenPar=30,
    ClosePar=31,Equal=32,NotEqual=33,Greater=34,GreaterEqual=35,Less=36,
    LessEqual=37,And=38,Or=39,Exclamation=40,Neg=41,Ident=42,
    IntNumber=43,RealNumber=44,String=45};

public struct ValueType
#line 7 "kompilator.y"
{
public string  val;
public char    type;
}
#line default
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[77];
  private static State[] states = new State[144];
  private static string[] nonTerms = new string[] {
      "code", "stat", "exp", "term", "factor", "declare", "bool", "cond", "while", 
      "log", "start", "$accept", "Anon@1", "return", "write", "assign", "block", 
      "read", "ifelse", "if", "Anon@2", "fullbool", "Anon@3", "ifhead", "Anon@4", 
      "Anon@5", };

  static Parser() {
    states[0] = new State(new int[]{11,3},new int[]{-11,1});
    states[1] = new State(new int[]{3,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{27,4});
    states[4] = new State(new int[]{19,11,42,65,20,70,21,73,22,76,17,80,27,88,15,98,12,135,18,138,2,141},new int[]{-1,5,-2,143,-15,10,-16,64,-6,69,-9,79,-17,87,-8,91,-19,92,-24,93,-20,133,-14,134,-18,137});
    states[5] = new State(new int[]{28,6,19,11,42,65,20,70,21,73,22,76,17,80,27,88,15,98,12,135,18,138,2,141},new int[]{-2,9,-15,10,-16,64,-6,69,-9,79,-17,87,-8,91,-19,92,-24,93,-20,133,-14,134,-18,137});
    states[6] = new State(-2,new int[]{-13,7});
    states[7] = new State(new int[]{13,8});
    states[8] = new State(-3);
    states[9] = new State(-4);
    states[10] = new State(-7);
    states[11] = new State(new int[]{45,62,30,-45,6,-45,41,-45,23,-45,24,-45,43,-45,44,-45,25,-45,26,-45,42,-45},new int[]{-26,12});
    states[12] = new State(new int[]{30,24,6,31,41,37,23,41,24,45,43,49,44,50,25,51,26,52,42,53},new int[]{-3,13,-4,35,-10,36,-5,23});
    states[13] = new State(new int[]{29,14,5,15,6,27});
    states[14] = new State(-46);
    states[15] = new State(new int[]{30,24,6,31,41,37,23,41,24,45,43,49,44,50,25,51,26,52,42,53},new int[]{-4,16,-10,36,-5,23});
    states[16] = new State(new int[]{7,17,8,29,29,-50,5,-50,6,-50,31,-50,32,-50,33,-50,34,-50,35,-50,36,-50,37,-50,38,-50,39,-50});
    states[17] = new State(new int[]{30,24,6,31,41,37,23,41,24,45,43,49,44,50,25,51,26,52,42,53},new int[]{-10,18,-5,23});
    states[18] = new State(new int[]{9,19,10,21,7,-53,8,-53,29,-53,5,-53,6,-53,31,-53,32,-53,33,-53,34,-53,35,-53,36,-53,37,-53,38,-53,39,-53});
    states[19] = new State(new int[]{30,24,6,31,41,37,23,41,24,45,43,49,44,50,25,51,26,52,42,53},new int[]{-10,20,-5,23});
    states[20] = new State(new int[]{9,19,10,21,7,-56,8,-56,29,-56,5,-56,6,-56,31,-56,32,-56,33,-56,34,-56,35,-56,36,-56,37,-56,38,-56,39,-56});
    states[21] = new State(new int[]{30,24,6,31,41,37,23,41,24,45,43,49,44,50,25,51,26,52,42,53},new int[]{-10,22,-5,23});
    states[22] = new State(new int[]{9,19,10,21,7,-57,8,-57,29,-57,5,-57,6,-57,31,-57,32,-57,33,-57,34,-57,35,-57,36,-57,37,-57,38,-57,39,-57});
    states[23] = new State(-58);
    states[24] = new State(new int[]{30,24,6,31,41,37,23,41,24,45,43,49,44,50,25,51,26,52,42,53},new int[]{-3,25,-4,35,-10,36,-5,23});
    states[25] = new State(new int[]{31,26,5,15,6,27});
    states[26] = new State(-59);
    states[27] = new State(new int[]{30,24,6,31,41,37,23,41,24,45,43,49,44,50,25,51,26,52,42,53},new int[]{-4,28,-10,36,-5,23});
    states[28] = new State(new int[]{7,17,8,29,29,-51,5,-51,6,-51,31,-51,32,-51,33,-51,34,-51,35,-51,36,-51,37,-51,38,-51,39,-51});
    states[29] = new State(new int[]{30,24,6,31,41,37,23,41,24,45,43,49,44,50,25,51,26,52,42,53},new int[]{-10,30,-5,23});
    states[30] = new State(new int[]{9,19,10,21,7,-54,8,-54,29,-54,5,-54,6,-54,31,-54,32,-54,33,-54,34,-54,35,-54,36,-54,37,-54,38,-54,39,-54});
    states[31] = new State(new int[]{30,32,43,59,44,60,42,61});
    states[32] = new State(new int[]{30,24,6,31,41,37,23,41,24,45,43,49,44,50,25,51,26,52,42,53},new int[]{-3,33,-4,35,-10,36,-5,23});
    states[33] = new State(new int[]{31,34,5,15,6,27});
    states[34] = new State(-60);
    states[35] = new State(new int[]{7,17,8,29,29,-52,5,-52,6,-52,31,-52,32,-52,33,-52,34,-52,35,-52,36,-52,37,-52,38,-52,39,-52});
    states[36] = new State(new int[]{9,19,10,21,7,-55,8,-55,29,-55,5,-55,6,-55,31,-55,32,-55,33,-55,34,-55,35,-55,36,-55,37,-55,38,-55,39,-55});
    states[37] = new State(new int[]{30,38,42,58});
    states[38] = new State(new int[]{30,24,6,31,41,37,23,41,24,45,43,49,44,50,25,51,26,52,42,53},new int[]{-3,39,-4,35,-10,36,-5,23});
    states[39] = new State(new int[]{31,40,5,15,6,27});
    states[40] = new State(-61);
    states[41] = new State(new int[]{30,42,44,56,42,57});
    states[42] = new State(new int[]{30,24,6,31,41,37,23,41,24,45,43,49,44,50,25,51,26,52,42,53},new int[]{-3,43,-4,35,-10,36,-5,23});
    states[43] = new State(new int[]{31,44,5,15,6,27});
    states[44] = new State(-62);
    states[45] = new State(new int[]{30,46,43,54,42,55});
    states[46] = new State(new int[]{30,24,6,31,41,37,23,41,24,45,43,49,44,50,25,51,26,52,42,53},new int[]{-3,47,-4,35,-10,36,-5,23});
    states[47] = new State(new int[]{31,48,5,15,6,27});
    states[48] = new State(-63);
    states[49] = new State(-64);
    states[50] = new State(-65);
    states[51] = new State(-70);
    states[52] = new State(-71);
    states[53] = new State(-72);
    states[54] = new State(-67);
    states[55] = new State(-75);
    states[56] = new State(-68);
    states[57] = new State(-74);
    states[58] = new State(-76);
    states[59] = new State(-66);
    states[60] = new State(-69);
    states[61] = new State(-73);
    states[62] = new State(new int[]{29,63});
    states[63] = new State(-47);
    states[64] = new State(-8);
    states[65] = new State(new int[]{4,66});
    states[66] = new State(new int[]{30,24,6,31,41,37,23,41,24,45,43,49,44,50,25,51,26,52,42,53},new int[]{-3,67,-4,35,-10,36,-5,23});
    states[67] = new State(new int[]{29,68,5,15,6,27});
    states[68] = new State(-49);
    states[69] = new State(-9);
    states[70] = new State(new int[]{42,71});
    states[71] = new State(new int[]{29,72});
    states[72] = new State(-42);
    states[73] = new State(new int[]{42,74});
    states[74] = new State(new int[]{29,75});
    states[75] = new State(-43);
    states[76] = new State(new int[]{42,77});
    states[77] = new State(new int[]{29,78});
    states[78] = new State(-44);
    states[79] = new State(-10);
    states[80] = new State(-20,new int[]{-21,81});
    states[81] = new State(new int[]{30,82});
    states[82] = new State(new int[]{30,124,6,31,41,37,23,41,24,45,43,49,44,50,25,117,26,118,42,119,40,129},new int[]{-22,83,-7,128,-3,104,-4,35,-10,36,-5,23});
    states[83] = new State(new int[]{31,84,38,102,39,122});
    states[84] = new State(-21,new int[]{-23,85});
    states[85] = new State(new int[]{19,11,42,65,20,70,21,73,22,76,17,80,27,88,15,98,12,135,18,138,2,141},new int[]{-2,86,-15,10,-16,64,-6,69,-9,79,-17,87,-8,91,-19,92,-24,93,-20,133,-14,134,-18,137});
    states[86] = new State(-22);
    states[87] = new State(-11);
    states[88] = new State(new int[]{19,11,42,65,20,70,21,73,22,76,17,80,27,88,15,98,12,135,18,138,2,141},new int[]{-1,89,-2,143,-15,10,-16,64,-6,69,-9,79,-17,87,-8,91,-19,92,-24,93,-20,133,-14,134,-18,137});
    states[89] = new State(new int[]{28,90,19,11,42,65,20,70,21,73,22,76,17,80,27,88,15,98,12,135,18,138,2,141},new int[]{-2,9,-15,10,-16,64,-6,69,-9,79,-17,87,-8,91,-19,92,-24,93,-20,133,-14,134,-18,137});
    states[90] = new State(-17);
    states[91] = new State(-12);
    states[92] = new State(-18);
    states[93] = new State(new int[]{19,11,42,65,20,70,21,73,22,76,17,80,27,88,15,98,12,135,18,138,2,141},new int[]{-2,94,-15,10,-16,64,-6,69,-9,79,-17,87,-8,91,-19,92,-24,93,-20,133,-14,134,-18,137});
    states[94] = new State(new int[]{16,95,28,-24,19,-24,42,-24,20,-24,21,-24,22,-24,17,-24,27,-24,15,-24,12,-24,18,-24,2,-24});
    states[95] = new State(-25,new int[]{-25,96});
    states[96] = new State(new int[]{19,11,42,65,20,70,21,73,22,76,17,80,27,88,15,98,12,135,18,138,2,141},new int[]{-2,97,-15,10,-16,64,-6,69,-9,79,-17,87,-8,91,-19,92,-24,93,-20,133,-14,134,-18,137});
    states[97] = new State(-26);
    states[98] = new State(new int[]{30,99});
    states[99] = new State(new int[]{30,124,6,31,41,37,23,41,24,45,43,49,44,50,25,117,26,118,42,119,40,129},new int[]{-22,100,-7,128,-3,104,-4,35,-10,36,-5,23});
    states[100] = new State(new int[]{31,101,38,102,39,122});
    states[101] = new State(-23);
    states[102] = new State(new int[]{30,24,6,31,41,37,23,41,24,45,43,49,44,50,25,117,26,118,42,119,40,120},new int[]{-7,103,-3,104,-4,35,-10,36,-5,23});
    states[103] = new State(-27);
    states[104] = new State(new int[]{32,105,5,15,6,27,33,107,34,109,35,111,36,113,37,115});
    states[105] = new State(new int[]{30,24,6,31,41,37,23,41,24,45,43,49,44,50,25,51,26,52,42,53},new int[]{-3,106,-4,35,-10,36,-5,23});
    states[106] = new State(new int[]{5,15,6,27,31,-32,38,-32,39,-32});
    states[107] = new State(new int[]{30,24,6,31,41,37,23,41,24,45,43,49,44,50,25,51,26,52,42,53},new int[]{-3,108,-4,35,-10,36,-5,23});
    states[108] = new State(new int[]{5,15,6,27,31,-33,38,-33,39,-33});
    states[109] = new State(new int[]{30,24,6,31,41,37,23,41,24,45,43,49,44,50,25,51,26,52,42,53},new int[]{-3,110,-4,35,-10,36,-5,23});
    states[110] = new State(new int[]{5,15,6,27,31,-34,38,-34,39,-34});
    states[111] = new State(new int[]{30,24,6,31,41,37,23,41,24,45,43,49,44,50,25,51,26,52,42,53},new int[]{-3,112,-4,35,-10,36,-5,23});
    states[112] = new State(new int[]{5,15,6,27,31,-35,38,-35,39,-35});
    states[113] = new State(new int[]{30,24,6,31,41,37,23,41,24,45,43,49,44,50,25,51,26,52,42,53},new int[]{-3,114,-4,35,-10,36,-5,23});
    states[114] = new State(new int[]{5,15,6,27,31,-36,38,-36,39,-36});
    states[115] = new State(new int[]{30,24,6,31,41,37,23,41,24,45,43,49,44,50,25,51,26,52,42,53},new int[]{-3,116,-4,35,-10,36,-5,23});
    states[116] = new State(new int[]{5,15,6,27,31,-37,38,-37,39,-37});
    states[117] = new State(new int[]{9,-70,10,-70,7,-70,8,-70,32,-70,5,-70,6,-70,33,-70,34,-70,35,-70,36,-70,37,-70,31,-38,38,-38,39,-38});
    states[118] = new State(new int[]{9,-71,10,-71,7,-71,8,-71,32,-71,5,-71,6,-71,33,-71,34,-71,35,-71,36,-71,37,-71,31,-39,38,-39,39,-39});
    states[119] = new State(new int[]{9,-72,10,-72,7,-72,8,-72,32,-72,5,-72,6,-72,33,-72,34,-72,35,-72,36,-72,37,-72,31,-40,38,-40,39,-40});
    states[120] = new State(new int[]{42,121});
    states[121] = new State(-41);
    states[122] = new State(new int[]{30,24,6,31,41,37,23,41,24,45,43,49,44,50,25,117,26,118,42,119,40,120},new int[]{-7,123,-3,104,-4,35,-10,36,-5,23});
    states[123] = new State(-28);
    states[124] = new State(new int[]{30,124,6,31,41,37,23,41,24,45,43,49,44,50,25,117,26,118,42,119,40,129},new int[]{-22,125,-3,127,-7,128,-4,35,-10,36,-5,23});
    states[125] = new State(new int[]{31,126,38,102,39,122});
    states[126] = new State(-29);
    states[127] = new State(new int[]{31,26,32,105,5,15,6,27,33,107,34,109,35,111,36,113,37,115});
    states[128] = new State(-30);
    states[129] = new State(new int[]{42,121,30,130});
    states[130] = new State(new int[]{30,124,6,31,41,37,23,41,24,45,43,49,44,50,25,117,26,118,42,119,40,129},new int[]{-22,131,-7,128,-3,104,-4,35,-10,36,-5,23});
    states[131] = new State(new int[]{31,132,38,102,39,122});
    states[132] = new State(-31);
    states[133] = new State(-19);
    states[134] = new State(-13);
    states[135] = new State(new int[]{29,136});
    states[136] = new State(-6);
    states[137] = new State(-14);
    states[138] = new State(new int[]{42,139});
    states[139] = new State(new int[]{29,140});
    states[140] = new State(-48);
    states[141] = new State(new int[]{13,142,28,-15,19,-15,42,-15,20,-15,21,-15,22,-15,17,-15,27,-15,15,-15,12,-15,18,-15,2,-15,16,-15});
    states[142] = new State(-16);
    states[143] = new State(-5);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-12, new int[]{-11,3});
    rules[2] = new Rule(-13, new int[]{});
    rules[3] = new Rule(-11, new int[]{11,27,-1,28,-13,13});
    rules[4] = new Rule(-1, new int[]{-1,-2});
    rules[5] = new Rule(-1, new int[]{-2});
    rules[6] = new Rule(-14, new int[]{12,29});
    rules[7] = new Rule(-2, new int[]{-15});
    rules[8] = new Rule(-2, new int[]{-16});
    rules[9] = new Rule(-2, new int[]{-6});
    rules[10] = new Rule(-2, new int[]{-9});
    rules[11] = new Rule(-2, new int[]{-17});
    rules[12] = new Rule(-2, new int[]{-8});
    rules[13] = new Rule(-2, new int[]{-14});
    rules[14] = new Rule(-2, new int[]{-18});
    rules[15] = new Rule(-2, new int[]{2});
    rules[16] = new Rule(-2, new int[]{2,13});
    rules[17] = new Rule(-17, new int[]{27,-1,28});
    rules[18] = new Rule(-8, new int[]{-19});
    rules[19] = new Rule(-8, new int[]{-20});
    rules[20] = new Rule(-21, new int[]{});
    rules[21] = new Rule(-23, new int[]{});
    rules[22] = new Rule(-9, new int[]{17,-21,30,-22,31,-23,-2});
    rules[23] = new Rule(-24, new int[]{15,30,-22,31});
    rules[24] = new Rule(-20, new int[]{-24,-2});
    rules[25] = new Rule(-25, new int[]{});
    rules[26] = new Rule(-19, new int[]{-24,-2,16,-25,-2});
    rules[27] = new Rule(-22, new int[]{-22,38,-7});
    rules[28] = new Rule(-22, new int[]{-22,39,-7});
    rules[29] = new Rule(-22, new int[]{30,-22,31});
    rules[30] = new Rule(-22, new int[]{-7});
    rules[31] = new Rule(-22, new int[]{40,30,-22,31});
    rules[32] = new Rule(-7, new int[]{-3,32,-3});
    rules[33] = new Rule(-7, new int[]{-3,33,-3});
    rules[34] = new Rule(-7, new int[]{-3,34,-3});
    rules[35] = new Rule(-7, new int[]{-3,35,-3});
    rules[36] = new Rule(-7, new int[]{-3,36,-3});
    rules[37] = new Rule(-7, new int[]{-3,37,-3});
    rules[38] = new Rule(-7, new int[]{25});
    rules[39] = new Rule(-7, new int[]{26});
    rules[40] = new Rule(-7, new int[]{42});
    rules[41] = new Rule(-7, new int[]{40,42});
    rules[42] = new Rule(-6, new int[]{20,42,29});
    rules[43] = new Rule(-6, new int[]{21,42,29});
    rules[44] = new Rule(-6, new int[]{22,42,29});
    rules[45] = new Rule(-26, new int[]{});
    rules[46] = new Rule(-15, new int[]{19,-26,-3,29});
    rules[47] = new Rule(-15, new int[]{19,45,29});
    rules[48] = new Rule(-18, new int[]{18,42,29});
    rules[49] = new Rule(-16, new int[]{42,4,-3,29});
    rules[50] = new Rule(-3, new int[]{-3,5,-4});
    rules[51] = new Rule(-3, new int[]{-3,6,-4});
    rules[52] = new Rule(-3, new int[]{-4});
    rules[53] = new Rule(-4, new int[]{-4,7,-10});
    rules[54] = new Rule(-4, new int[]{-4,8,-10});
    rules[55] = new Rule(-4, new int[]{-10});
    rules[56] = new Rule(-10, new int[]{-10,9,-10});
    rules[57] = new Rule(-10, new int[]{-10,10,-10});
    rules[58] = new Rule(-10, new int[]{-5});
    rules[59] = new Rule(-5, new int[]{30,-3,31});
    rules[60] = new Rule(-5, new int[]{6,30,-3,31});
    rules[61] = new Rule(-5, new int[]{41,30,-3,31});
    rules[62] = new Rule(-5, new int[]{23,30,-3,31});
    rules[63] = new Rule(-5, new int[]{24,30,-3,31});
    rules[64] = new Rule(-5, new int[]{43});
    rules[65] = new Rule(-5, new int[]{44});
    rules[66] = new Rule(-5, new int[]{6,43});
    rules[67] = new Rule(-5, new int[]{24,43});
    rules[68] = new Rule(-5, new int[]{23,44});
    rules[69] = new Rule(-5, new int[]{6,44});
    rules[70] = new Rule(-5, new int[]{25});
    rules[71] = new Rule(-5, new int[]{26});
    rules[72] = new Rule(-5, new int[]{42});
    rules[73] = new Rule(-5, new int[]{6,42});
    rules[74] = new Rule(-5, new int[]{23,42});
    rules[75] = new Rule(-5, new int[]{24,42});
    rules[76] = new Rule(-5, new int[]{41,42});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // Anon@1 -> /* empty */
#line 26 "kompilator.y"
           {
               //Compiler.EmitCode("// linia {0,3} :  "+Compiler.source[lineno-1],lineno);
               Compiler.EmitCode("ldstr \"\\nEnd of execution\\n\"");
               Compiler.EmitCode("call void [mscorlib]System.Console::WriteLine(string)");
               Compiler.EmitCode("ldc.i4 0");
               YYAccept();
           }
#line default
        break;
      case 4: // code -> code, stat
#line 35 "kompilator.y"
                     { ++lineno; }
#line default
        break;
      case 5: // code -> stat
#line 36 "kompilator.y"
                 { ++lineno; }
#line default
        break;
      case 6: // return -> Return, Semicolon
#line 39 "kompilator.y"
          {
            Compiler.EmitCode("ldc.i4 0");
            Compiler.EmitCode("leave EndMain");
          }
#line default
        break;
      case 15: // stat -> error
#line 46 "kompilator.y"
          {
               Console.WriteLine("  line {0,3}:  syntax error",lineno);
               ++Compiler.errors;
               yyerrok();
          }
#line default
        break;
      case 16: // stat -> error, Eof
#line 52 "kompilator.y"
          {
               Console.WriteLine("  line {0,3}:  syntax error",lineno);
               ++Compiler.errors;
               yyerrok();
               YYAccept();
          }
#line default
        break;
      case 20: // Anon@2 -> /* empty */
#line 64 "kompilator.y"
            { 
                deeplevel++;
                if (deeplevel == 1)
                    temp = Compiler.NewTemp();
                Compiler.EmitCode("{0}:", temp + "_" + deeplevel.ToString());
            }
#line default
        break;
      case 21: // Anon@3 -> /* empty */
#line 71 "kompilator.y"
            { 
                if (deeplevel == 1)
                    temp2 = Compiler.NewTemp();
                Compiler.EmitCode("brfalse {0}", temp2 + "_" + deeplevel.ToString()); 
            }
#line default
        break;
      case 22: // while -> While, Anon@2, OpenPar, fullbool, ClosePar, Anon@3, stat
#line 77 "kompilator.y"
            { 
                Compiler.EmitCode("br {0}", temp + "_" + deeplevel.ToString());
                Compiler.EmitCode("{0}:", temp2 + "_" + deeplevel.ToString());
                deeplevel--;
            }
#line default
        break;
      case 23: // ifhead -> If, OpenPar, fullbool, ClosePar
#line 84 "kompilator.y"
            {
                deeplevel++;
                if (deeplevel == 1)
                    temp = Compiler.NewTemp();
                Compiler.EmitCode("brfalse {0}", temp + "_" + deeplevel.ToString());
            }
#line default
        break;
      case 24: // if -> ifhead, stat
#line 93 "kompilator.y"
            { 
                
                Compiler.EmitCode("{0}:", temp + "_" + deeplevel.ToString());
                deeplevel--;
            }
#line default
        break;
      case 25: // Anon@4 -> /* empty */
#line 102 "kompilator.y"
            {
               
                if (deeplevel == 1)
                    temp2 = Compiler.NewTemp();
                Compiler.EmitCode("br {0}", temp2 + "_" + deeplevel.ToString());
                Compiler.EmitCode("{0}:", temp + "_" + deeplevel.ToString());
            }
#line default
        break;
      case 26: // ifelse -> ifhead, stat, Else, Anon@4, stat
#line 110 "kompilator.y"
            {
                Compiler.EmitCode("{0}:", temp2 + "_" + deeplevel.ToString());
                deeplevel--;
            }
#line default
        break;
      case 27: // fullbool -> fullbool, And, bool
#line 116 "kompilator.y"
            {
                 Compiler.EmitCode("and");
            }
#line default
        break;
      case 28: // fullbool -> fullbool, Or, bool
#line 120 "kompilator.y"
            {
                 Compiler.EmitCode("or");
            }
#line default
        break;
      case 31: // fullbool -> Exclamation, OpenPar, fullbool, ClosePar
#line 126 "kompilator.y"
            {
                    Compiler.EmitCode("ldc.i4 1");
                    Compiler.EmitCode("sub");
            }
#line default
        break;
      case 32: // bool -> exp, Equal, exp
#line 132 "kompilator.y"
            {
                Compiler.EmitCode("ceq");
            }
#line default
        break;
      case 33: // bool -> exp, NotEqual, exp
#line 136 "kompilator.y"
            {
                Compiler.EmitCode("ceq");
                Compiler.EmitCode("neg");
            }
#line default
        break;
      case 34: // bool -> exp, Greater, exp
#line 141 "kompilator.y"
            {
                Compiler.EmitCode("cgt");
            }
#line default
        break;
      case 35: // bool -> exp, GreaterEqual, exp
#line 145 "kompilator.y"
            {
                Compiler.EmitCode("ldc.i4 1");
                Compiler.EmitCode("sub");
                Compiler.EmitCode("cgt");
            }
#line default
        break;
      case 36: // bool -> exp, Less, exp
#line 151 "kompilator.y"
            {
                Compiler.EmitCode("clt");
            }
#line default
        break;
      case 37: // bool -> exp, LessEqual, exp
#line 155 "kompilator.y"
            {
                Compiler.EmitCode("ldc.i4 1");
                Compiler.EmitCode("add");
                Compiler.EmitCode("clt");
            }
#line default
        break;
      case 38: // bool -> True
#line 161 "kompilator.y"
            {
                Compiler.EmitCode("ldc.i4 1"); 
            }
#line default
        break;
      case 39: // bool -> False
#line 165 "kompilator.y"
            {
                Compiler.EmitCode("ldc.i4 0");
            }
#line default
        break;
      case 40: // bool -> Ident
#line 169 "kompilator.y"
            {
                if (Compiler.symbolTable.ContainsKey(ValueStack[ValueStack.Depth-1].val))
                {
                    if (Compiler.symbolTable[ValueStack[ValueStack.Depth-1].val] == "bool")
                    {
                        Compiler.EmitCode("ldloc {0}", ValueStack[ValueStack.Depth-1].val);
                    }
                    else
                    {
                        Console.WriteLine("line {0,3}:  only bool variables can be used that way", lineno);
                        Compiler.errors++;
                    }
                }
                else
                {
                    Console.WriteLine("line {0,3}:  use of undeclared variable!", lineno);
                    Compiler.errors++;
                }
            }
#line default
        break;
      case 41: // bool -> Exclamation, Ident
#line 189 "kompilator.y"
            {
                if (Compiler.symbolTable.ContainsKey(ValueStack[ValueStack.Depth-1].val))
                {
                    if (Compiler.symbolTable[ValueStack[ValueStack.Depth-1].val] == "bool")
                    {
                        Compiler.EmitCode("ldloc {0}", ValueStack[ValueStack.Depth-1].val);
                        Compiler.EmitCode("ldc.i4 1");
                        Compiler.EmitCode("sub");
                    }
                    else
                    {
                        Console.WriteLine("line {0,3}:  only bool variables can be used with !", lineno);
                        Compiler.errors++;
                    }
                }
                else
                {
                    Console.WriteLine("line {0,3}:  use of undeclared variable!", lineno);
                    Compiler.errors++;
                }
            }
#line default
        break;
      case 42: // declare -> Int, Ident, Semicolon
#line 212 "kompilator.y"
            {
                if (System.Linq.Enumerable.All(Compiler.symbolTable.Keys, ident => ident != ValueStack[ValueStack.Depth-2].val))
                {
                    Compiler.EmitCode(".locals init ( int32 {0} )", ValueStack[ValueStack.Depth-2].val);
                    Compiler.symbolTable.Add(ValueStack[ValueStack.Depth-2].val, "int");
                }
                else
                {
                    Console.WriteLine("line {0,3}:  variable already declared!", lineno);
                    Compiler.errors++;
                }

            }
#line default
        break;
      case 43: // declare -> Double, Ident, Semicolon
#line 226 "kompilator.y"
            {
                if (System.Linq.Enumerable.All(Compiler.symbolTable.Keys, ident => ident != ValueStack[ValueStack.Depth-2].val))
                {
                    Compiler.EmitCode(".locals init ( float64 {0} )", ValueStack[ValueStack.Depth-2].val);
                    Compiler.symbolTable.Add(ValueStack[ValueStack.Depth-2].val, "double");
                }
                else
                {
                    Console.WriteLine("line {0,3}:  variable already declared!", lineno);
                    Compiler.errors++;
                }
            }
#line default
        break;
      case 44: // declare -> Bool, Ident, Semicolon
#line 239 "kompilator.y"
            {
                if (System.Linq.Enumerable.All(Compiler.symbolTable.Keys, ident => ident != ValueStack[ValueStack.Depth-2].val))
                {
                    Compiler.EmitCode(".locals init ( int32 {0} )", ValueStack[ValueStack.Depth-2].val);
                    Compiler.symbolTable.Add(ValueStack[ValueStack.Depth-2].val, "bool");
                }
                else
                {
                    Console.WriteLine("line {0,3}:  variable already declared!", lineno);
                    Compiler.errors++;
                }
            }
#line default
        break;
      case 45: // Anon@5 -> /* empty */
#line 253 "kompilator.y"
            {
               Compiler.EmitCode("ldstr \"{0}\"");
            }
#line default
        break;
      case 46: // write -> Write, Anon@5, exp, Semicolon
#line 257 "kompilator.y"
            {
               Compiler.EmitCode("box [mscorlib]System.{0}",ValueStack[ValueStack.Depth-2].type=='i'?"Int32":"Double");
               Compiler.EmitCode("ldstr \"{0}\"",ValueStack[ValueStack.Depth-2].type=='i'?"i":"r");
               Compiler.EmitCode("call void [mscorlib]System.Console::Write(string,object,object)");
               Compiler.EmitCode("");
            }
#line default
        break;
      case 47: // write -> Write, String, Semicolon
#line 264 "kompilator.y"
            {
                Compiler.EmitCode("ldstr {0}", ValueStack[ValueStack.Depth-2].val);
                Compiler.EmitCode("call void [mscorlib]System.Console::Write(string)");
            }
#line default
        break;
      case 48: // read -> Read, Ident, Semicolon
#line 270 "kompilator.y"
            {
               if (!Compiler.symbolTable.ContainsKey(ValueStack[ValueStack.Depth-2].val)) 
               {
                    Console.WriteLine("line {0,3}: error - use of undeclared variable", lineno);
                    Compiler.errors++;
               }
               else
               {
                    Compiler.EmitCode("call string [mscorlib]System.Console::ReadLine()");
                    if (Compiler.symbolTable[ValueStack[ValueStack.Depth-2].val] == "bool")
                    {
                    
                    }
                    else if (Compiler.symbolTable[ValueStack[ValueStack.Depth-2].val] == "int")
                    {
                        Compiler.EmitCode("call int32 [mscorlib]System.Int32::Parse(string)");
                    }
                    else
                    {
                       Compiler.EmitCode("call float64 [mscorlib]System.Double::Parse(string)");
                    }
                    Compiler.EmitCode("stloc {0}", ValueStack[ValueStack.Depth-2].val);
               }
            }
#line default
        break;
      case 49: // assign -> Ident, Assign, exp, Semicolon
#line 296 "kompilator.y"
            {
               if (!Compiler.symbolTable.ContainsKey(ValueStack[ValueStack.Depth-4].val)) 
               {
                    Console.WriteLine("line {0,3}: error - use of undeclared variable", lineno);
                    Compiler.errors++;
               }
               else
               {
                    if (Compiler.symbolTable[ValueStack[ValueStack.Depth-4].val]=="int" && ValueStack[ValueStack.Depth-2].type != 'i')
                    {
                        Console.WriteLine("line {0,3}:  semantic error - cannot convert to int (use convert operator)",lineno);
                        ++Compiler.errors;
                    } 
                    else if (Compiler.symbolTable[ValueStack[ValueStack.Depth-4].val]=="double" && ValueStack[ValueStack.Depth-2].type != 'd' && ValueStack[ValueStack.Depth-2].type != 'i')
                    {
                        Console.WriteLine("line {0,3}:  semantic error - cannot convert to double (use convert operator)",lineno);
                        ++Compiler.errors;
                    }
                    else if (Compiler.symbolTable[ValueStack[ValueStack.Depth-4].val]=="bool" && ValueStack[ValueStack.Depth-2].type != 'b')
                    {
                        Console.WriteLine("line {0,3}:  semantic error - cannot convert to bool (use convert operator)",lineno);
                        ++Compiler.errors;
                    }
                    else
                    {
                        Compiler.EmitCode("stloc {0}", ValueStack[ValueStack.Depth-4].val);
                    }
               }
            }
#line default
        break;
      case 50: // exp -> exp, Plus, term
#line 327 "kompilator.y"
               { CurrentSemanticValue.type = BinaryOpGenCode(Tokens.Plus, ValueStack[ValueStack.Depth-3].type, ValueStack[ValueStack.Depth-1].type); }
#line default
        break;
      case 51: // exp -> exp, Minus, term
#line 329 "kompilator.y"
               { CurrentSemanticValue.type = BinaryOpGenCode(Tokens.Minus, ValueStack[ValueStack.Depth-3].type, ValueStack[ValueStack.Depth-1].type); }
#line default
        break;
      case 52: // exp -> term
#line 331 "kompilator.y"
               { CurrentSemanticValue.type = ValueStack[ValueStack.Depth-1].type; }
#line default
        break;
      case 53: // term -> term, Multiplies, log
#line 335 "kompilator.y"
               { CurrentSemanticValue.type = BinaryOpGenCode(Tokens.Multiplies, ValueStack[ValueStack.Depth-3].type, ValueStack[ValueStack.Depth-1].type); }
#line default
        break;
      case 54: // term -> term, Divides, log
#line 337 "kompilator.y"
               { CurrentSemanticValue.type = BinaryOpGenCode(Tokens.Divides, ValueStack[ValueStack.Depth-3].type, ValueStack[ValueStack.Depth-1].type); }
#line default
        break;
      case 55: // term -> log
#line 339 "kompilator.y"
               { CurrentSemanticValue.type = ValueStack[ValueStack.Depth-1].type; }
#line default
        break;
      case 56: // log -> log, SumLog, log
#line 342 "kompilator.y"
               { CurrentSemanticValue.type = BinaryOpGenCode(Tokens.SumLog, ValueStack[ValueStack.Depth-3].type, ValueStack[ValueStack.Depth-1].type); }
#line default
        break;
      case 57: // log -> log, IlLog, log
#line 344 "kompilator.y"
               { CurrentSemanticValue.type = BinaryOpGenCode(Tokens.IlLog, ValueStack[ValueStack.Depth-3].type, ValueStack[ValueStack.Depth-1].type); }
#line default
        break;
      case 58: // log -> factor
#line 346 "kompilator.y"
               { CurrentSemanticValue.type = ValueStack[ValueStack.Depth-1].type; }
#line default
        break;
      case 59: // factor -> OpenPar, exp, ClosePar
#line 349 "kompilator.y"
               { CurrentSemanticValue.type = ValueStack[ValueStack.Depth-2].type; }
#line default
        break;
      case 60: // factor -> Minus, OpenPar, exp, ClosePar
#line 351 "kompilator.y"
          {
            CurrentSemanticValue.type = ValueStack[ValueStack.Depth-2].type;
            Compiler.EmitCode("neg");
          }
#line default
        break;
      case 61: // factor -> Neg, OpenPar, exp, ClosePar
#line 356 "kompilator.y"
          {
            CurrentSemanticValue.type = ValueStack[ValueStack.Depth-2].type;
            Compiler.EmitCode("not");
          }
#line default
        break;
      case 62: // factor -> IntConv, OpenPar, exp, ClosePar
#line 361 "kompilator.y"
          {
            if (ValueStack[ValueStack.Depth-2].type == 'd')
            {
                CurrentSemanticValue.type = 'i';
                Compiler.EmitCode("conv.i4");
            }
            else
            {
                 Console.WriteLine("line {0,3}:  expression must be double to use (int) convertion",lineno);
                 Compiler.errors++;
            }
          }
#line default
        break;
      case 63: // factor -> DoubleConv, OpenPar, exp, ClosePar
#line 374 "kompilator.y"
          {
            if (ValueStack[ValueStack.Depth-2].type == 'i')
            {
                CurrentSemanticValue.type = 'd';
                Compiler.EmitCode("conv.r8");
            }
            else
            {
                 Console.WriteLine("line {0,3}:  expression must be int to use (double) convertion",lineno);
                 Compiler.errors++;
            }
          }
#line default
        break;
      case 64: // factor -> IntNumber
#line 387 "kompilator.y"
          {
               Compiler.EmitCode("ldc.i4 {0}",int.Parse(ValueStack[ValueStack.Depth-1].val));
               CurrentSemanticValue.type = 'i'; 
          }
#line default
        break;
      case 65: // factor -> RealNumber
#line 392 "kompilator.y"
          {
               double d = double.Parse(ValueStack[ValueStack.Depth-1].val,System.Globalization.CultureInfo.InvariantCulture);
               Compiler.EmitCode(string.Format(System.Globalization.CultureInfo.InvariantCulture,"ldc.r8 {0}",d));
               CurrentSemanticValue.type = 'd'; 
          }
#line default
        break;
      case 66: // factor -> Minus, IntNumber
#line 398 "kompilator.y"
          {
               Compiler.EmitCode("ldc.i4 {0}",int.Parse(ValueStack[ValueStack.Depth-1].val) * -1);
               CurrentSemanticValue.type = 'i'; 
          }
#line default
        break;
      case 67: // factor -> DoubleConv, IntNumber
#line 403 "kompilator.y"
          {
            Compiler.EmitCode("ldc.i4 {0}",int.Parse(ValueStack[ValueStack.Depth-1].val));
            Compiler.EmitCode("conv.r8");
            CurrentSemanticValue.type = 'd';
          }
#line default
        break;
      case 68: // factor -> IntConv, RealNumber
#line 409 "kompilator.y"
          {
            double d = double.Parse(ValueStack[ValueStack.Depth-1].val,System.Globalization.CultureInfo.InvariantCulture);
            Compiler.EmitCode(string.Format(System.Globalization.CultureInfo.InvariantCulture,"ldc.r8 {0}",d));
            Compiler.EmitCode("conv.i4");
            CurrentSemanticValue.type = 'i';
          }
#line default
        break;
      case 69: // factor -> Minus, RealNumber
#line 416 "kompilator.y"
          {
               double d = double.Parse(ValueStack[ValueStack.Depth-1].val,System.Globalization.CultureInfo.InvariantCulture) * -1;
               Compiler.EmitCode(string.Format(System.Globalization.CultureInfo.InvariantCulture,"ldc.r8 {0}",d));
               CurrentSemanticValue.type = 'd'; 
          }
#line default
        break;
      case 70: // factor -> True
#line 422 "kompilator.y"
          {
                neg=1;
                Compiler.EmitCode("ldc.i4 1");
                CurrentSemanticValue.type = 'b';
          }
#line default
        break;
      case 71: // factor -> False
#line 428 "kompilator.y"
          {
                neg=1;
                Compiler.EmitCode("ldc.i4 0");
                CurrentSemanticValue.type = 'b';
          }
#line default
        break;
      case 72: // factor -> Ident
#line 434 "kompilator.y"
          {

               Compiler.EmitCode("ldloc {0}", ValueStack[ValueStack.Depth-1].val);
               switch(Compiler.symbolTable[ValueStack[ValueStack.Depth-1].val])
               {
                    case "int":
                        CurrentSemanticValue.type = 'i';
                        break;
                    case "double":
                        CurrentSemanticValue.type = 'd';
                        break;
                    case "bool":
                        CurrentSemanticValue.type = 'b';
                        break;
                    default:
                        Console.WriteLine("line {0,3}:  unrecognized type",lineno);
                        Compiler.errors++;
                        break;
               }
          }
#line default
        break;
      case 73: // factor -> Minus, Ident
#line 455 "kompilator.y"
          {
               if (Compiler.symbolTable[ValueStack[ValueStack.Depth-1].val] != "int" && Compiler.symbolTable[ValueStack[ValueStack.Depth-1].val] != "double")
               {
                    Console.WriteLine("line {0,3}: cannot use - operator to bool variable", lineno);
                    Compiler.errors++;
               }
               else
               {
                   Compiler.EmitCode("ldloc {0}", ValueStack[ValueStack.Depth-1].val);
                   Compiler.EmitCode("neg");
                   switch(Compiler.symbolTable[ValueStack[ValueStack.Depth-1].val])
                   {
                        case "int":
                            CurrentSemanticValue.type = 'i';
                            break;
                        case "double":
                            CurrentSemanticValue.type = 'd';
                            break;
                        default:
                            Console.WriteLine("line {0,3}:  unrecognized type",lineno);
                            Compiler.errors++;
                            break;
                   }
               }
          }
#line default
        break;
      case 74: // factor -> IntConv, Ident
#line 481 "kompilator.y"
          {
               if (Compiler.symbolTable[ValueStack[ValueStack.Depth-1].val] != "double")
               {
                    Console.WriteLine("line {0,3}: cannot use (int) operator to non double variable", lineno);
                    Compiler.errors++;
               }
               else
               {
                   Compiler.EmitCode("ldloc {0}", ValueStack[ValueStack.Depth-1].val);
                   Compiler.EmitCode("conv.i4");
                   CurrentSemanticValue.type = 'i';
               }
          }
#line default
        break;
      case 75: // factor -> DoubleConv, Ident
#line 495 "kompilator.y"
          {
               if (Compiler.symbolTable[ValueStack[ValueStack.Depth-1].val] != "int")
               {
                    Console.WriteLine("line {0,3}: cannot use (double) operator to non int variable", lineno);
                    Compiler.errors++;
               }
               else
               {
                   Compiler.EmitCode("ldloc {0}", ValueStack[ValueStack.Depth-1].val);
                   Compiler.EmitCode("conv.r8");
                   CurrentSemanticValue.type = 'd';
               }
          }
#line default
        break;
      case 76: // factor -> Neg, Ident
#line 509 "kompilator.y"
          {
               if (Compiler.symbolTable[ValueStack[ValueStack.Depth-1].val] != "int" && Compiler.symbolTable[ValueStack[ValueStack.Depth-1].val] != "double")
               {
                    Console.WriteLine("line {0,3}: cannot use ~ operator to bool variable", lineno);
                    Compiler.errors++;
               }
               else
               {
                   Compiler.EmitCode("ldloc {0}", ValueStack[ValueStack.Depth-1].val);
                   Compiler.EmitCode("not");
                   switch(Compiler.symbolTable[ValueStack[ValueStack.Depth-1].val])
                   {
                        case "int":
                            CurrentSemanticValue.type = 'i';
                            break;
                        case "double":
                            CurrentSemanticValue.type = 'd';
                            break;
                        default:
                            Console.WriteLine("line {0,3}:  unrecognized type",lineno);
                            Compiler.errors++;
                            break;
                   }
               }
          }
#line default
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 537 "kompilator.y"

int lineno = 1;
int neg = 1;
string temp;
string temp2;
int deeplevel = 0;

public Parser(Scanner scanner) : base(scanner) { }

private char BinaryOpGenCode(Tokens t, char type1, char type2)
    {
    char type = ( type1=='i' && type2=='i' ) ? 'i' : 'r' ;
    if ( type1!=type )
        {
        Compiler.EmitCode("stloc temp");
        Compiler.EmitCode("conv.r8");
        Compiler.EmitCode("ldloc temp");
        }
    if ( type2!=type )
        Compiler.EmitCode("conv.r8");
    switch ( t )
        {
        case Tokens.Plus:
            Compiler.EmitCode("add");
            break;
        case Tokens.Minus:
            Compiler.EmitCode("sub");
            break;
        case Tokens.Multiplies:
            Compiler.EmitCode("mul");
            break;
        case Tokens.Divides:
            Compiler.EmitCode("div");
            break;
        case Tokens.SumLog:
            Compiler.EmitCode("or");
            break;
        case Tokens.IlLog:
            Compiler.EmitCode("and");
            break;
        default:
            Console.WriteLine($"  line {lineno,3}:  internal gencode error");
            ++Compiler.errors;
            break;
        }
    return type;
    }
#line default
}
}
